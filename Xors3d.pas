{
  Corporation: @D-Dionix
  Author: Dionix_100
  Connection: https://vk.com/id212262518
}

unit xors3d;
interface

{$IFDEF MSWINDOWS}
uses
  Windows;

const
    Dlls_xors3d= 'xors3d.dll';
    LOG_NO = 5;
    LOG_FATAL  = 4;
    LOG_ERROR  = 3;
    LOG_WARNING   = 2;
    LOG_MESSAGE   = 1;
    LOG_INFO   = 0;

    // Log targets
    LOG_HTML  = 1;
    LOG_COUT  = 2;
    LOG_STRING = 4;

    // Skinning types
    SKIN_SOFTWARE = 2;
    SKIN_HARDWARE = 1;

    // Light sources types
    LIGHT_DIRECTIONAL = 1;
    LIGHT_POINT   = 2;
    LIGHT_SPOT = 3;

    // Texture filtering
    TF_NONE = 0;
    TF_POINT   = 1;
    TF_LINEAR  = 2;
    TF_ANISOTROPIC    = 3;
    TF_ANISOTROPICX4  = 4;
    TF_ANISOTROPICX8  = 5;
    TF_ANISOTROPICX16 = 6;

    // PixelShader versions
    PS_1_1 = 0;
    PS_1_2 = 1;
    PS_1_3 = 2;
    PS_1_4 = 3;
    PS_2_0 = 4;
    PS_3_0 = 5;

    // VertexShader versions
    VS_1_1 = 0;
    VS_2_0 = 1;
    VS_3_0 = 2;

    // Matrix semantics
    WORLD   = 0;
    WORLDVIEWPROJ  = 1;
    VIEWPROJ = 2;
    VIEW    = 3;
    PROJ    = 4;
    WORLDVIEW   = 5;
    VIEWINVERSE = 6;
    WORLDINVERSETRANSPOSE  = 15;
    WORLDINVERSE   = 16;
    WORLDTRANSPOSE = 17;
    VIEWPROJINVERSE    = 18;
    VIEWPROJINVERSETRANSPOSE  = 19;
    VIEWTRANSPOSE  = 20;
    VIEWINVRSETRANSPOSE = 21;
    PROJINVERSE = 22;
    PROJTRANSPOSE  = 23;
    PROJINVRSETRANSPOSE = 24;
    WORLDVIEWPROJTRANSPOSE = 25;
    WORLDVIEWPROJINVERSE   = 26;
    WORLDVIEWPROJINVERSETRANSPOSE = 27;
    WORLDVIEWTRANSPOSE = 28;
    WORLDVIEWINVERSE   = 29;
    WORLDVIEWINVERSETRANSPOSE = 30;

    // Antialiasing types
    AANONE  = 0;
    AA2SAMPLES  = 1;
    AA3SAMPLES  = 2;
    AA4SAMPLES  = 3;
    AA5SAMPLES  = 4;
    AA6SAMPLES  = 5;
    AA7SAMPLES  = 6;
    AA8SAMPLES  = 7;
    AA9SAMPLES  = 8;
    AA10SAMPLES = 9;
    AA11SAMPLES = 10;
    AA12SAMPLES = 11;
    AA13SAMPLES = 12;
    AA14SAMPLES = 13;
    AA15SAMPLES = 14;
    AA16SAMPLES = 15;

    // Camera fog mode
    FOG_NONE = 0;
    FOG_LINEAR   = 1;

    // Camera projection mode
    PROJ_DISABLEP  = 0;
    PROJ_PERSPECTIVE    = 1;
    PROJ_ORTHOGRAPHIC = 2;

    // Entity FX flags
    FX_NOTHING = 0;
    FX_FULLBRIGHT = 1;
    FX_VERTEXCOLOR    = 2;
    FX_FLATSHADED = 4;
    FX_DISABLEFOG = 8;
    FX_DISABLECULLING = 16;
    FX_NOALPHABLEND   = 32;

    // Entity blending modes
    BLEND_ALPHA   = 1;
    BLEND_MULTIPLY    = 2;
    BLEND_ADD  = 3;
    BLEND_PUREADD = 4;

    // Compare functions
    CMP_NEVER  = 1;
    CMP_LESS   = 2;
    CMP_EQUAL  = 3;
    CMP_LESSEQUAL = 4;
    CMP_GREATER   = 5;
    CMP_NOTEQUAL  = 6;
    CMP_GREATEREQUAL  = 7;
    CMP_ALWAYS = 8;

    // Axis
    AXIS_X    = 1;
    AXIS_Y    = 2;
    AXIS_Z    = 3;

    // Texture loading flags
    FLAGS_COLOR  = 1;
    FLAGS_ALPHA  = 2;
    FLAGS_MASKED = 4;
    FLAGS_MIPMAPPED  = 8;
    FLAGS_CLAMPU = 16;
    FLAGS_CLAMPV = 32;
    FLAGS_SPHERICALENVMAP   = 64;
    FLAGS_CUBICENVMAP   = 128;
    FLAGS_R32F   = 256;
    FLAGS_SKIPCACHE  = 512;
    FLAGS_VOLUMETEXTURE = 1024;
    FLAGS_ARBG16F = 2048;
    FLAGS_ARBG32F = 4096;

    // Texture blending modes
    TEXBLEND_NONE   = 0;
    TEXBLEND_ALPHA  = 1;
    TEXBLEND_MULTIPLY  = 2;
    TEXBLEND_ADD = 3;
    TEXBLEND_DOT3   = 4;
    TEXBLEND_LIGHTMAP  = 5;
    TEXBLEND_SEPARATEALPHA = 6;

    // Cube map faces
    FACE_LEFT = 0;
    FACE_FORWARD  = 1;
    FACE_RIGHT    = 2;
    FACE_BACKWARD = 3;
    FACE_UP   = 4;
    FACE_DOWN = 5;

    // Entity animation types
    ANIMATION_STOP  = 0;
    ANIMATION_LOOP  = 1;
    ANIMATION_PINGPONG  = 2;
    ANIMATION_ONE   = 3;

    // Collision types
    SPHERETOSPHERE  = 1;
    SPHERETOBOX = 3;
    SPHERETOTRIMESH = 2;

    // Collision respones types
    RESPONSE_STOP  = 1;
    RESPONSE_SLIDING   = 2;
    RESPONSE_SLIDING_DOWNLOCK = 3;

    // Entity picking modes
    PICK_NONE = 0;
    PICK_SPHERE   = 1;
    PICK_TRIMESH  = 2;
    PICK_BOX  = 3;

    // Sprite view modes
    SPRITE_FIXED    = 1;
    SPRITE_FREE = 2;
    SPRITE_FREEROLL = 3;
    SPRITE_FIXEDYAW = 4;

    // Joystick types
    JOY_NONE    = 0;
    JOY_DIGITAL = 1;
    JOY_ANALOG  = 2;

    // Cubemap rendering modes
    CUBEMAP_SPECULAR   = 1;
    CUBEMAP_DIFFUSE    = 2;
    CUBEMAP_REFRACTION = 3;

    // Shadow's blur levels
    SHADOWS_BLUR_NONE = 0;
    SHADOWS_BLUR_3    = 1;
    SHADOWS_BLUR_5    = 2;
    SHADOWS_BLUR_7    = 3;
    SHADOWS_BLUR_11   = 4;
    SHADOWS_BLUR_13   = 5;


    // primitives types
    PRIMITIVE_POINTLIST = 1;
    PRIMITIVE_LINELIST  = 2;
    PRIMITIVE_LINESTRIP = 3;
    PRIMITIVE_TRIANGLELIST  = 4;
    PRIMITIVE_TRIANGLESTRIP = 5;
    PRIMITIVE_TRIANGLEFAN   = 6;

    // line separator types
    LS_NUL = 0;
    LS_CR = 1;
    LS_LF = 2;
    LS_CRLF    = 3;

    // physics: joint types
    JOINT_POINT2POINT    = 0;
    JOINT_6DOF = 1;
    JOINT_6DOFSPRING    = 2;
    JOINT_HINGE = 3;

    // physics: debug drawer modes
    PXDD_NO = 0;
    PXDD_WIREFRAME    = 1;
    PXDD_AABB  = 2;
    PXDD_CONTACTS = 4;
    PXDD_JOINTS   = 8;
    PXDD_JOINT_LIMITS = 16;
    PXDD_NO_AXIS  = 32;

    // physics: ray casting modes
    PXRC_SINGLE   = 0;
    PXRC_MULTIPLE = 1;

    function xCreate3DLine(fromX_prs, fromY_prs, fromZ_prs, toX_prs, toY_prs, toZ_prs:Single; red_prs, green_prs, blue_prs, alpha_prs, useZBuffer_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreate3DLine@44';
    procedure x3DLineOrigin(line3d_prs:Integer; x_prs, y_prs, z_prs:Single; isGlobal_prs:Integer); stdcall; external Dlls_xors3d name '_x3DLineOrigin@20';
    procedure x3DLineAddNode(line3d_prs:Integer; x_prs, y_prs, z_prs:Single; isGlobal_prs:Integer); stdcall; external Dlls_xors3d name '_x3DLineAddNode@20';
    procedure x3DLineColor(line3d_prs, red_prs, green_prs, blue_prs, alpha_prs:Integer); stdcall; external Dlls_xors3d name '_x3DLineColor@20';
    procedure x3DLineUseZBuffer(line3d_prs, state_prs:Integer); stdcall; external Dlls_xors3d name '_x3DLineUseZBuffer@8';
    function x3DLineOriginX(line3d_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_x3DLineOriginX@8';
    function x3DLineOriginY(line3d_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_x3DLineOriginY@8';
    function x3DLineOriginZ(line3d_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_x3DLineOriginZ@8';
    function x3DLineNodesCount(line3d_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_x3DLineNodesCount@4';
    function x3DLineNodeX(line3d_prs, index_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_x3DLineNodeX@12';
    function x3DLineNodeY(line3d_prs, index_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_x3DLineNodeY@12';
    function x3DLineNodeZ(line3d_prs, index_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_x3DLineNodeZ@12';
    function x3DLineRed(line3d_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_x3DLineRed@4';
    function x3DLineGreen(line3d_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_x3DLineGreen@4';
    function x3DLineBlue(line3d_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_x3DLineBlue@4';
    function x3DLineAlpha(line3d_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_x3DLineAlpha@4';
    function xGet3DLineUseZBuffer(line3d_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGet3DLineUseZBuffer@4';
    procedure xDelete3DLineNode(line3d_prs, index_prs:Integer); stdcall; external Dlls_xors3d name '_xDelete3DLineNode@8';
    procedure xClear3DLine(line3d_prs:Integer); stdcall; external Dlls_xors3d name '_xClear3DLine@4';
    function xLoadBrush(path_prs:AnsiString; flags_prs:Integer; xScale_prs, yScale_prs:Single):Integer; stdcall; external Dlls_xors3d name '_xLoadBrush@16';
    function xCreateBrush(red_prs, green_prs, blue_prs:Single):Integer; stdcall; external Dlls_xors3d name '_xCreateBrush@12';
    procedure xFreeBrush(brush_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeBrush@4';
    function xGetBrushTexture(brush_prs, index_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetBrushTexture@8';
    procedure xBrushColor(brush_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xBrushColor@16';
    procedure xBrushAlpha(brush_prs:Integer; alpha_prs:Single); stdcall; external Dlls_xors3d name '_xBrushAlpha@8';
    procedure xBrushShininess(brush_prs:Integer; shininess_prs:Single); stdcall; external Dlls_xors3d name '_xBrushShininess@8';
    procedure xBrushBlend(brush_prs, blend_prs:Integer); stdcall; external Dlls_xors3d name '_xBrushBlend@8';
    procedure xBrushFX(brush_prs, FX_prs:Integer); stdcall; external Dlls_xors3d name '_xBrushFX@8';
    procedure xBrushTexture(brush_prs, texture_prs, frame_prs, index_prs:Integer); stdcall; external Dlls_xors3d name '_xBrushTexture@16';
    function xGetBrushName(brush_prs:Integer):PAnsiChar; stdcall; external Dlls_xors3d name '_xGetBrushName@4';
    procedure xBrushName(brush_prs:Integer; name_prs:AnsiString); stdcall; external Dlls_xors3d name '_xBrushName@8';
    function xGetBrushAlpha(brush_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xGetBrushAlpha@4';
    function xGetBrushBlend(brush_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetBrushBlend@4';
    function xGetBrushRed(brush_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetBrushRed@4';
    function xGetBrushGreen(brush_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetBrushGreen@4';
    function xGetBrushBlue(brush_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetBrushBlue@4';
    function xGetBrushFX(brush_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetBrushFX@4';
    function xGetBrushShininess(brush_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xGetBrushShininess@4';
    procedure xCameraFogMode(camera_prs, mode_prs:Integer); stdcall; external Dlls_xors3d name '_xCameraFogMode@8';
    procedure xCameraFogColor(camera_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xCameraFogColor@16';
    procedure xCameraFogRange(camera_prs:Integer; nearRange_prs, farRange_prs:Single); stdcall; external Dlls_xors3d name '_xCameraFogRange@12';
    procedure xCameraClsColor(camera_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xCameraClsColor@16';
    procedure xCameraProjMode(camera_prs, mode_prs:Integer); stdcall; external Dlls_xors3d name '_xCameraProjMode@8';
    procedure xCameraClsMode(camera_prs, clearColor_prs, clearZBuffer_prs:Integer); stdcall; external Dlls_xors3d name '_xCameraClsMode@12';
    function xSphereInFrustum(camera_prs:Integer; x_prs, y_prs, z_prs, radii_prs:Single):Integer; stdcall; external Dlls_xors3d name '_xSphereInFrustum@20';
    procedure xCameraClipPlane(camera_prs, index_prs, enabled_prs:Integer; a_prs, b_prs, c_prs, d_prs:Single); stdcall; external Dlls_xors3d name '_xCameraClipPlane@28';
    procedure xCameraRange(camera_prs:Integer; nearRange_prs, farRange_prs:Single); stdcall; external Dlls_xors3d name '_xCameraRange@12';
    procedure xCameraViewport(camera_prs, x_prs, y_prs, width_prs, height_prs:Integer); stdcall; external Dlls_xors3d name '_xCameraViewport@20';
    procedure xCameraCropViewport(camera_prs, x_prs, y_prs, width_prs, height_prs:Integer); stdcall; external Dlls_xors3d name '_xCameraCropViewport@20';
    function xCreateCamera(parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateCamera@4';
    procedure xCameraProject(camera_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xCameraProject@16';
    procedure xCameraProject2D(camera_prs, x_prs, y_prs:Integer; zDistance_prs:Single); stdcall; external Dlls_xors3d name '_xCameraProject2D@16';
    function xProjectedX():Single; stdcall; external Dlls_xors3d name '_xProjectedX@0';
    function xProjectedY():Single; stdcall; external Dlls_xors3d name '_xProjectedY@0';
    function xProjectedZ():Single; stdcall; external Dlls_xors3d name '_xProjectedZ@0';
    function xGetViewMatrix(camera_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetViewMatrix@4';
    function xGetProjectionMatrix(camera_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetProjectionMatrix@4';
    procedure xCameraZoom(camera_prs:Integer; zoom_prs:Single); stdcall; external Dlls_xors3d name '_xCameraZoom@8';
    function xGetViewProjMatrix(camera_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetViewProjMatrix@4';
    procedure xCollisions(srcType_prs, destType_prs, collideMethod_prs, response_prs:Integer); stdcall; external Dlls_xors3d name '_xCollisions@16';
    procedure xClearCollisions(); stdcall; external Dlls_xors3d name '_xClearCollisions@0';
    procedure xResetEntity(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xResetEntity@4';
    procedure xEntityRadius(entity_prs:Integer; xRadius_prs, yRadius_prs:Single); stdcall; external Dlls_xors3d name '_xEntityRadius@12';
    procedure xEntityBox(entity_prs:Integer; x_prs, y_prs, z_prs, width_prs, height_prs, depth_prs:Single); stdcall; external Dlls_xors3d name '_xEntityBox@28';
    procedure xEntityType(entity_prs, typeID_prs, recurse_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityType@12';
    function xEntityCollided(entity_prs, typeID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEntityCollided@8';
    function xCountCollisions(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCountCollisions@4';
    function xCollisionX(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xCollisionX@8';
    function xCollisionY(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xCollisionY@8';
    function xCollisionZ(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xCollisionZ@8';
    function xCollisionNX(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xCollisionNX@8';
    function xCollisionNY(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xCollisionNY@8';
    function xCollisionNZ(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xCollisionNZ@8';
    function xCollisionTime(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xCollisionTime@8';
    function xCollisionEntity(entity_prs, index_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCollisionEntity@8';
    function xCollisionSurface(entity_prs, index_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCollisionSurface@8';
    function xCollisionTriangle(entity_prs, index_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCollisionTriangle@8';
    function xGetEntityType(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetEntityType@4';
    procedure xRenderPostEffect(poly_prs:Integer); stdcall; external Dlls_xors3d name '_xRenderPostEffect@4';
    function xCreatePostEffectPoly(camera_prs, mode_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreatePostEffectPoly@8';
    function xGetFunctionAddress(name_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xGetFunctionAddress@4';
    function xLoadFXFile(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xLoadFXFile@4';
    procedure xFreeEffect(effect_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeEffect@4';
    procedure xSetEntityEffect(entity_prs, effect_prs, index_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEntityEffect@12';
    procedure xSetSurfaceEffect(surface_prs, effect_prs, index_prs:Integer); stdcall; external Dlls_xors3d name '_xSetSurfaceEffect@12';
    procedure xSetBonesArrayName(entity_prs:Integer; arrayName_prs:AnsiString; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetBonesArrayName@12';
    procedure xSurfaceBonesArrayName(surface_prs:Integer; arrayName_prs:AnsiString; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceBonesArrayName@12';
    procedure xSetEffectInt(entity_prs:Integer; name_prs:AnsiString; value_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectInt@16';
    procedure xSurfaceEffectInt(surface_prs:Integer; name_prs:AnsiString; value_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectInt@16';
    procedure xSetEffectFloat(entity_prs:Integer; name_prs:AnsiString; value_prs:Single; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectFloat@16';
    procedure xSurfaceEffectFloat(surface_prs:Integer; name_prs:AnsiString; value_prs:Single; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectFloat@16';
    procedure xSetEffectBool(entity_prs:Integer; name_prs:AnsiString; value_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectBool@16';
    procedure xSurfaceEffectBool(surface_prs:Integer; name_prs:AnsiString; value_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectBool@16';
    procedure xSetEffectVector(entity_prs:Integer; name_prs:AnsiString; x_prs, y_prs, z_prs, w_prs:Single; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectVector@28';
    procedure xSurfaceEffectVector(surface_prs:Integer; name_prs:AnsiString; x_prs, y_prs, z_prs, w_prs:Single; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectVector@28';
    procedure xSetEffectVectorArray(entity_prs:Integer; name_prs:AnsiString; value_prs, count_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectVectorArray@20';
    procedure xSurfaceEffectVectorArray(surface_prs:Integer; name_prs:AnsiString; value_prs, count_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectVectorArray@20';
    procedure xSurfaceEffectMatrixArray(surface_prs:Integer; name_prs:AnsiString; value_prs, count_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectMatrixArray@20';
    procedure xSurfaceEffectFloatArray(surface_prs:Integer; name_prs:AnsiString; value_prs, count_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectFloatArray@20';
    procedure xSurfaceEffectIntArray(surface_prs:Integer; name_prs:AnsiString; value_prs, count_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectIntArray@20';
    procedure xSetEffectMatrixArray(entity_prs:Integer; name_prs:AnsiString; value_prs, count_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectMatrixArray@20';
    procedure xSetEffectFloatArray(entity_prs:Integer; name_prs:AnsiString; value_prs, count_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectFloatArray@20';
    procedure xSetEffectIntArray(entity_prs:Integer; name_prs:AnsiString; value_prs, count_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectIntArray@20';
    function xCreateBufferVectors(count_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateBufferVectors@4';
    procedure xBufferVectorsSetElement(buffer_prs, number_prs:Integer; x_prs, y_prs, z_prs, w_prs:Single); stdcall; external Dlls_xors3d name '_xBufferVectorsSetElement@24';
    function xCreateBufferMatrix(count_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateBufferMatrix@4';
    procedure xBufferMatrixSetElement(buffer_prs, number_prs, matrix_prs:Integer); stdcall; external Dlls_xors3d name '_xBufferMatrixSetElement@12';
    function xBufferMatrixGetElement(buffer_prs, number_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xBufferMatrixGetElement@8';
    function xCreateBufferFloats(count_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateBufferFloats@4';
    procedure xBufferFloatsSetElement(buffer_prs, number_prs:Integer; value_prs:Single); stdcall; external Dlls_xors3d name '_xBufferFloatsSetElement@12';
    function xBufferFloatsGetElement(buffer_prs, number_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xBufferFloatsGetElement@8';
    procedure xBufferDelete(buffer_prs:Integer); stdcall; external Dlls_xors3d name '_xBufferDelete@4';
    procedure xSetEffectMatrixWithElements(entity_prs:Integer; name_prs:AnsiString; m11_prs, m12_prs, m13_prs, m14_prs, m21_prs, m22_prs, m23_prs, m24_prs, m31_prs, m32_prs, m33_prs, m34_prs, m41_prs, m42_prs, m43_prs, m44_prs:Single; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectMatrixWithElements@76';
    procedure xSetEffectMatrix(entity_prs:Integer; name_prs:AnsiString; matrix_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectMatrix@16';
    procedure xSurfaceEffectMatrix(surface_prs:Integer; name_prs:AnsiString; matrix_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectMatrix@16';
    procedure xSurfaceEffectMatrixWithElements(surface_prs:Integer; name_prs:AnsiString; m11_prs, m12_prs, m13_prs, m14_prs, m21_prs, m22_prs, m23_prs, m24_prs, m31_prs, m32_prs, m33_prs, m34_prs, m41_prs, m42_prs, m43_prs, m44_prs:Single; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectMatrixWithElements@76';
    procedure xSetEffectEntityTexture(entity_prs:Integer; name_prs:AnsiString; index_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectEntityTexture@16';
    procedure xSetEffectTexture(entity_prs:Integer; name_prs:AnsiString; texture_prs, frame_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectTexture@20';
    procedure xSurfaceEffectTexture(surface_prs:Integer; name_prs:AnsiString; texture_prs, frame_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectTexture@20';
    procedure xSurfaceEffectMatrixSemantic(surface_prs:Integer; name_prs:AnsiString; value_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceEffectMatrixSemantic@16';
    procedure xSetEffectMatrixSemantic(entity_prs:Integer; name_prs:AnsiString; value_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectMatrixSemantic@16';
    procedure xDeleteSurfaceConstant(surface_prs:Integer; name_prs:AnsiString; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xDeleteSurfaceConstant@12';
    procedure xDeleteEffectConstant(entity_prs:Integer; name_prs:AnsiString; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xDeleteEffectConstant@12';
    procedure xClearSurfaceConstants(surface_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xClearSurfaceConstants@8';
    procedure xClearEffectConstants(entity_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xClearEffectConstants@8';
    procedure xSetEffectTechnique(entity_prs:Integer; name_prs:AnsiString; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEffectTechnique@12';
    procedure xSurfaceTechnique(surface_prs:Integer; name_prs:AnsiString; layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceTechnique@12';
    function xValidateEffectTechnique(effect_prs:Integer; name_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xValidateEffectTechnique@8';
    procedure xSetEntityShaderLayer(entity_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEntityShaderLayer@8';
    function xGetEntityShaderLayer(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetEntityShaderLayer@4';
    procedure xSetSurfaceShaderLayer(surface_prs, layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetSurfaceShaderLayer@8';
    function xGetSurfaceShaderLayer(surface_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetSurfaceShaderLayer@4';
    procedure xSetFXInt(effect_prs:Integer; name_prs:AnsiString; value_prs:Integer); stdcall; external Dlls_xors3d name '_xSetFXInt@12';
    procedure xSetFXFloat(effect_prs:Integer; name_prs:AnsiString; value_prs:Single); stdcall; external Dlls_xors3d name '_xSetFXFloat@12';
    procedure xSetFXBool(effect_prs:Integer; name_prs:AnsiString; value_prs:Integer); stdcall; external Dlls_xors3d name '_xSetFXBool@12';
    procedure xSetFXVector(effect_prs:Integer; name_prs:AnsiString; x_prs, y_prs, z_prs, w_prs:Single); stdcall; external Dlls_xors3d name '_xSetFXVector@24';
    procedure xSetFXVectorArray(effect_prs:Integer; name_prs:AnsiString; value_prs, count_prs:Integer); stdcall; external Dlls_xors3d name '_xSetFXVectorArray@16';
    procedure xSetFXMatrixArray(effect_prs:Integer; name_prs:AnsiString; value_prs, count_prs:Integer); stdcall; external Dlls_xors3d name '_xSetFXMatrixArray@16';
    procedure xSetFXFloatArray(effect_prs:Integer; name_prs:AnsiString; value_prs, count_prs:Integer); stdcall; external Dlls_xors3d name '_xSetFXFloatArray@16';
    procedure xSetFXIntArray(effect_prs:Integer; name_prs:AnsiString; value_prs, count_prs:Integer); stdcall; external Dlls_xors3d name '_xSetFXIntArray@16';
    procedure xSetFXEntityMatrix(effect_prs:Integer; name_prs:AnsiString; matrix_prs:Integer); stdcall; external Dlls_xors3d name '_xSetFXEntityMatrix@12';
    procedure xSetFXTexture(effect_prs:Integer; name_prs:AnsiString; texture_prs, frame_prs:Integer); stdcall; external Dlls_xors3d name '_xSetFXTexture@16';
    procedure xSetFXMatrixSemantic(effect_prs:Integer; name_prs:AnsiString; value_prs:Integer); stdcall; external Dlls_xors3d name '_xSetFXMatrixSemantic@12';
    procedure xDeleteFXConstant(effect_prs:Integer; name_prs:AnsiString); stdcall; external Dlls_xors3d name '_xDeleteFXConstant@8';
    procedure xClearFXConstants(effect_prs:Integer); stdcall; external Dlls_xors3d name '_xClearFXConstants@4';
    procedure xSetFXTechnique(effect_prs:Integer; name_prs:AnsiString); stdcall; external Dlls_xors3d name '_xSetFXTechnique@8';
    function xCreateEmitter(psystem_prs, parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateEmitter@8';
    procedure xEmitterEnable(emitter_prs, state_prs:Integer); stdcall; external Dlls_xors3d name '_xEmitterEnable@8';
    function xEmitterEnabled(emitter_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEmitterEnabled@4';
    function xEmitterGetPSystem(emitter_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEmitterGetPSystem@4';
    function xEmitterAddParticle(emitter_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEmitterAddParticle@4';
    procedure xEmitterFreeParticle(emitter_prs, particle_prs:Integer); stdcall; external Dlls_xors3d name '_xEmitterFreeParticle@8';
    function xEmitterValidateParticle(emitter_prs, particle_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEmitterValidateParticle@8';
    function xEmitterCountParticles(emitter_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEmitterCountParticles@4';
    function xEmitterGetParticle(emitter_prs, index_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEmitterGetParticle@8';
    function xEmitterAlive(emitter_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEmitterAlive@4';
    function xExtractAnimSeq(entity_prs, firstFrame_prs, lastFrame_prs, sequence_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xExtractAnimSeq@16';
    function xLoadAnimSeq(entity_prs:Integer; path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xLoadAnimSeq@8';
    procedure xSetAnimSpeed(entity_prs:Integer; speed_prs:Single; rootBone_prs:AnsiString); stdcall; external Dlls_xors3d name '_xSetAnimSpeed@12';
    function xAnimSpeed(entity_prs:Integer; rootBone_prs:AnsiString):Single; stdcall; external Dlls_xors3d name '_xAnimSpeed@8';
    function xAnimating(entity_prs:Integer; rootBone_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xAnimating@8';
    function xAnimTime(entity_prs:Integer; rootBone_prs:AnsiString):Single; stdcall; external Dlls_xors3d name '_xAnimTime@8';
    procedure xAnimate(entity_prs, mode_prs:Integer; speed_prs:Single; sequence_prs:Integer; translate_prs:Single; rootBone_prs:AnsiString); stdcall; external Dlls_xors3d name '_xAnimate@24';
    function xAnimSeq(entity_prs:Integer; rootBone_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xAnimSeq@8';
    function xAnimLength(entity_prs:Integer; rootBone_prs:AnsiString):Single; stdcall; external Dlls_xors3d name '_xAnimLength@8';
    procedure xSetAnimTime(entity_prs:Integer; time_prs:Single; sequence_prs:Integer; rootBone_prs:AnsiString); stdcall; external Dlls_xors3d name '_xSetAnimTime@16';
    procedure xSetAnimFrame(entity_prs:Integer; frame_prs:Single; sequence_prs:Integer; rootBone_prs:AnsiString); stdcall; external Dlls_xors3d name '_xSetAnimFrame@16';
    procedure xEntityAutoFade(entity_prs:Integer; nearRange_prs, farRange_prs:Single); stdcall; external Dlls_xors3d name '_xEntityAutoFade@12';
    procedure xEntityOrder(entity_prs, order_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityOrder@8';
    procedure xFreeEntity(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeEntity@4';
    function xCopyEntity(entity_prs, parent_prs, cloneBuffers_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCopyEntity@12';
    procedure xPaintEntity(entity_prs, brush_prs:Integer); stdcall; external Dlls_xors3d name '_xPaintEntity@8';
    procedure xEntityShininess(entity_prs:Integer; shininess_prs:Single); stdcall; external Dlls_xors3d name '_xEntityShininess@8';
    procedure xEntityPickMode(entity_prs, mode_prs, obscurer_prs, recursive_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityPickMode@16';
    procedure xEntityTexture(entity_prs, texture_prs, frame_prs, index_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityTexture@16';
    procedure xEntityFX(entity_prs, fx_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityFX@8';
    function xGetParent(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetParent@4';
    procedure xSetFrustumSphere(entity_prs:Integer; x_prs, y_prs, z_prs, radii_prs:Single); stdcall; external Dlls_xors3d name '_xSetFrustumSphere@20';
    procedure xCalculateFrustumVolume(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xCalculateFrustumVolume@4';
    procedure xEntityParent(entity_prs, parent_prs, isGlobal_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityParent@12';
    procedure xShowEntity(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xShowEntity@4';
    procedure xHideEntity(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xHideEntity@4';
    procedure xNameEntity(entity_prs:Integer; name_prs:AnsiString); stdcall; external Dlls_xors3d name '_xNameEntity@8';
    procedure xSetEntityQuaternion(entity_prs, quaternion_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEntityQuaternion@8';
    procedure xSetEntityMatrix(entity_prs, matrix_prs:Integer); stdcall; external Dlls_xors3d name '_xSetEntityMatrix@8';
    procedure xEntityAlpha(entity_prs:Integer; alpha_prs:Single); stdcall; external Dlls_xors3d name '_xEntityAlpha@8';
    procedure xEntityColor(entity_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityColor@16';
    procedure xEntitySpecularColor(entity_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xEntitySpecularColor@16';
    procedure xEntityAmbientColor(entity_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityAmbientColor@16';
    procedure xEntityEmissiveColor(entity_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityEmissiveColor@16';
    procedure xEntityBlend(entity_prs, mode_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityBlend@8';
    procedure xSetAlphaRef(entity_prs, value_prs:Integer); stdcall; external Dlls_xors3d name '_xSetAlphaRef@8';
    procedure xSetAlphaFunc(entity_prs, value_prs:Integer); stdcall; external Dlls_xors3d name '_xSetAlphaFunc@8';
    function xCreateInstance(entity_prs, parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateInstance@8';
    procedure xFreezeInstances(entity_prs, enable_prs:Integer); stdcall; external Dlls_xors3d name '_xFreezeInstances@8';
    function xInstancingAvaliable():Integer; stdcall; external Dlls_xors3d name '_xInstancingAvaliable@0';
    procedure xScaleEntity(entity_prs:Integer; x_prs, y_prs, z_prs:Single; isGlobal_prs:Integer); stdcall; external Dlls_xors3d name '_xScaleEntity@20';
    procedure xPositionEntity(entity_prs:Integer; x_prs, y_prs, z_prs:Single; isGlobal_prs:Integer); stdcall; external Dlls_xors3d name '_xPositionEntity@20';
    procedure xMoveEntity(entity_prs:Integer; x_prs, y_prs, z_prs:Single; isGlobal_prs:Integer); stdcall; external Dlls_xors3d name '_xMoveEntity@20';
    procedure xTranslateEntity(entity_prs:Integer; x_prs, y_prs, z_prs:Single; isGlobal_prs:Integer); stdcall; external Dlls_xors3d name '_xTranslateEntity@20';
    procedure xRotateEntity(entity_prs:Integer; x_prs, y_prs, z_prs:Single; isGlobal_prs:Integer); stdcall; external Dlls_xors3d name '_xRotateEntity@20';
    procedure xTurnEntity(entity_prs:Integer; x_prs, y_prs, z_prs:Single; isGlobal_prs:Integer); stdcall; external Dlls_xors3d name '_xTurnEntity@20';
    procedure xPointEntity(entity1_prs, entity2_prs:Integer; roll_prs:Single); stdcall; external Dlls_xors3d name '_xPointEntity@12';
    procedure xAlignToVector(entity_prs:Integer; x_prs, y_prs, z_prs:Single; axis_prs:Integer; factor_prs:Single); stdcall; external Dlls_xors3d name '_xAlignToVector@24';
    function xEntityDistance(entity1_prs, entity2_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityDistance@8';
    function xGetMatElement(entity_prs, row_prs, col_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xGetMatElement@12';
    function xEntityClass(entity_prs:Integer):PAnsiChar; stdcall; external Dlls_xors3d name '_xEntityClass@4';
    function xGetEntityBrush(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetEntityBrush@4';
    function xEntityX(entity_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityX@8';
    function xEntityY(entity_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityY@8';
    function xEntityZ(entity_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityZ@8';
    function xEntityVisible(entity_prs, destination_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEntityVisible@8';
    function xEntityScaleX(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityScaleX@4';
    function xEntityScaleY(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityScaleY@4';
    function xEntityScaleZ(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityScaleZ@4';
    function xEntityRoll(entity_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityRoll@8';
    function xEntityYaw(entity_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityYaw@8';
    function xEntityPitch(entity_prs, isGlobal_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityPitch@8';
    function xEntityName(entity_prs:Integer):PAnsiChar; stdcall; external Dlls_xors3d name '_xEntityName@4';
    function xCountChildren(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCountChildren@4';
    function xGetChild(entity_prs, index_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetChild@8';
    function xEntityInView(entity_prs, camera_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEntityInView@8';
    function xFindChild(entity_prs:Integer; name_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xFindChild@8';
    function xGetEntityMatrix(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetEntityMatrix@4';
    function xGetEntityAlpha(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xGetEntityAlpha@4';
    function xGetAlphaRef(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetAlphaRef@4';
    function xGetAlphaFunc(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetAlphaFunc@4';
    function xEntityRed(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEntityRed@4';
    function xEntityGreen(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEntityGreen@4';
    function xEntityBlue(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEntityBlue@4';
    function xGetEntityShininess(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xGetEntityShininess@4';
    function xGetEntityBlend(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetEntityBlend@4';
    function xGetEntityFX(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetEntityFX@4';
    function xEntityHidden(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEntityHidden@4';
    function xMountPackFile(path_prs, mountpoint_prs, password_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xMountPackFile@12';
    procedure xUnmountPackFile(packfile_prs:Integer); stdcall; external Dlls_xors3d name '_xUnmountPackFile@4';
    function xOpenFile(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xOpenFile@4';
    function xReadFile(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xReadFile@4';
    function xWriteFile(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xWriteFile@4';
    procedure xCloseFile(file_prs:Integer); stdcall; external Dlls_xors3d name '_xCloseFile@4';
    function xFilePos(file_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xFilePos@4';
    procedure xSeekFile(file_prs, offset_prs:Integer); stdcall; external Dlls_xors3d name '_xSeekFile@8';
    function xFileType(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xFileType@4';
    function xFileSize(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xFileSize@4';
    function xReadDir(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xReadDir@4';
    procedure xCloseDir(handle_prs:Integer); stdcall; external Dlls_xors3d name '_xCloseDir@4';
    function xNextFile(handle_prs:Integer):PAnsiChar; stdcall; external Dlls_xors3d name '_xNextFile@4';
    function xCurrentDir():PAnsiChar; stdcall; external Dlls_xors3d name '_xCurrentDir@0';
    procedure xChangeDir(path_prs:AnsiString); stdcall; external Dlls_xors3d name '_xChangeDir@4';
    function xCreateDir(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xCreateDir@4';
    function xDeleteDir(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xDeleteDir@4';
    function xCopyFile(pathSrc_prs, pathDest_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xCopyFile@8';
    function xDeleteFile(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xDeleteFile@4';
    function xEof(file_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEof@4';
    function xReadByte(file_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xReadByte@4';
    function xReadShort(file_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xReadShort@4';
    function xReadInt(file_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xReadInt@4';
    function xReadFloat(file_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xReadFloat@4';
    function xReadString(file_prs:Integer):PAnsiChar; stdcall; external Dlls_xors3d name '_xReadString@4';
    function xReadLine(file_prs, ls_flag_prs:Integer):PAnsiChar; stdcall; external Dlls_xors3d name '_xReadLine@8';
    procedure xWriteByte(file_prs, value_prs:Integer); stdcall; external Dlls_xors3d name '_xWriteByte@8';
    procedure xWriteShort(file_prs, value_prs:Integer); stdcall; external Dlls_xors3d name '_xWriteShort@8';
    procedure xWriteInt(file_prs, value_prs:Integer); stdcall; external Dlls_xors3d name '_xWriteInt@8';
    procedure xWriteFloat(file_prs:Integer; value_prs:Single); stdcall; external Dlls_xors3d name '_xWriteFloat@8';
    procedure xWriteString(file_prs:Integer; value_prs:AnsiString); stdcall; external Dlls_xors3d name '_xWriteString@8';
    procedure xWriteLine(file_prs:Integer; value_prs:AnsiString; ls_flag_prs:Integer); stdcall; external Dlls_xors3d name '_xWriteLine@12';
    function xLoadFont(name_prs:AnsiString; height_prs, bold_prs, italic_prs, underline_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xLoadFont@20';
    procedure xText(x_prs, y_prs:Integer; textString_prs:AnsiString; centerx_prs, centery_prs:Integer); stdcall; external Dlls_xors3d name '_xText@20';
    procedure xSetFont(font_prs:Integer); stdcall; external Dlls_xors3d name '_xSetFont@4';
    procedure xFreeFont(font_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeFont@4';
    function xFontWidth():Integer; stdcall; external Dlls_xors3d name '_xFontWidth@0';
    function xFontHeight():Integer; stdcall; external Dlls_xors3d name '_xFontHeight@0';
    function xStringWidth(textString_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xStringWidth@4';
    function xStringHeight(textString_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xStringHeight@4';
    function xWinMessage(message_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xWinMessage@4';
    function xGetMaxPixelShaderVersion():Integer; stdcall; external Dlls_xors3d name '_xGetMaxPixelShaderVersion@0';
    procedure xLine(x1_prs, y1_prs, x2_prs, y2_prs:Integer); stdcall; external Dlls_xors3d name '_xLine@16';
    procedure xRect(x_prs, y_prs, width_prs, height_prs, solid_prs:Integer); stdcall; external Dlls_xors3d name '_xRect@20';
    function xRectsOverlap(x1_prs, y1_prs, width1_prs, height1_prs, x2_prs, y2_prs, width2_prs, height2_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xRectsOverlap@32';
    procedure xViewport(x_prs, y_prs, width_prs, height_prs:Integer); stdcall; external Dlls_xors3d name '_xViewport@16';
    procedure xOval(x_prs, y_prs, width_prs, height_prs, solid_prs:Integer); stdcall; external Dlls_xors3d name '_xOval@20';
    procedure xOrigin(x_prs, y_prs:Integer); stdcall; external Dlls_xors3d name '_xOrigin@8';
    function xGetMaxVertexShaderVersion():Integer; stdcall; external Dlls_xors3d name '_xGetMaxVertexShaderVersion@0';
    function xGetMaxAntiAlias():Integer; stdcall; external Dlls_xors3d name '_xGetMaxAntiAlias@0';
    function xGetMaxTextureFiltering():Integer; stdcall; external Dlls_xors3d name '_xGetMaxTextureFiltering@0';
    procedure xSetAntiAliasType(typeID_prs:Integer); stdcall; external Dlls_xors3d name '_xSetAntiAliasType@4';
    procedure xAppTitle(title_prs:AnsiString); stdcall; external Dlls_xors3d name '_xAppTitle@4';
    procedure xSetWND(window_prs:Integer); stdcall; external Dlls_xors3d name '_xSetWND@4';
    procedure xSetRenderWindow(window_prs:Integer); stdcall; external Dlls_xors3d name '_xSetRenderWindow@4';
    procedure xDestroyRenderWindow(); stdcall; external Dlls_xors3d name '_xDestroyRenderWindow@0';
    procedure xFlip(); stdcall; external Dlls_xors3d name '_xFlip@0';
    function xBackBuffer():Integer; stdcall; external Dlls_xors3d name '_xBackBuffer@0';
    procedure xLockBuffer(buffer_prs:Integer); stdcall; external Dlls_xors3d name '_xLockBuffer@4';
    procedure xUnlockBuffer(buffer_prs:Integer); stdcall; external Dlls_xors3d name '_xUnlockBuffer@4';
    procedure xWritePixelFast(x_prs, y_prs, argb_prs, buffer_prs:Integer); stdcall; external Dlls_xors3d name '_xWritePixelFast@16';
    function xReadPixelFast(x_prs, y_prs, buffer_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xReadPixelFast@12';
    function xGetPixels(buffer_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetPixels@4';
    procedure xSaveBuffer(buffer_prs:Integer; path_prs:AnsiString); stdcall; external Dlls_xors3d name '_xSaveBuffer@8';
    function xGetCurrentBuffer():Integer; stdcall; external Dlls_xors3d name '_xGetCurrentBuffer@0';
    function xBufferWidth(buffer_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xBufferWidth@4';
    function xBufferHeight(buffer_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xBufferHeight@4';
    function xCatchTimestamp():Integer; stdcall; external Dlls_xors3d name '_xCatchTimestamp@0';
    function xGetElapsedTime(timeStamp_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xGetElapsedTime@4';
    procedure xSetBuffer(buffer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetBuffer@4';
    procedure xSetMRT(buffer_prs, frame_prs, index_prs:Integer); stdcall; external Dlls_xors3d name '_xSetMRT@12';
    procedure xUnSetMRT(); stdcall; external Dlls_xors3d name '_xUnSetMRT@0';
    function xGetNumberRT():Integer; stdcall; external Dlls_xors3d name '_xGetNumberRT@0';
    function xTextureBuffer(texture_prs, frame_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xTextureBuffer@8';
    procedure xLoadBuffer(buffer_prs:Integer; path_prs:AnsiString); stdcall; external Dlls_xors3d name '_xLoadBuffer@8';
    procedure xWritePixel(x_prs, y_prs, argb_prs, buffer_prs:Integer); stdcall; external Dlls_xors3d name '_xWritePixel@16';
    procedure xCopyPixel(sx_prs, sy_prs, sourceBuffer_prs, dx_prs, dy_prs, destinationBuffer_prs:Integer); stdcall; external Dlls_xors3d name '_xCopyPixel@24';
    procedure xCopyPixelFast(sx_prs, sy_prs, sourceBuffer_prs, dx_prs, dy_prs, destinationBuffer_prs:Integer); stdcall; external Dlls_xors3d name '_xCopyPixelFast@24';
    procedure xCopyRect(sx_prs, sy_prs, sw_prs, sh_prs, dx_prs, dy_prs, sourceBuffer_prs, destinationBuffer_prs:Integer); stdcall; external Dlls_xors3d name '_xCopyRect@32';
    function xGraphicsBuffer():Integer; stdcall; external Dlls_xors3d name '_xGraphicsBuffer@0';
    function xGetColor(x_prs, y_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetColor@8';
    function xReadPixel(x_prs, y_prs, buffer_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xReadPixel@12';
    function xGraphicsWidth(isVirtual_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGraphicsWidth@4';
    function xGraphicsHeight(isVirtual_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGraphicsHeight@4';
    function xGraphicsDepth():Integer; stdcall; external Dlls_xors3d name '_xGraphicsDepth@0';
    function xColorRed():Integer; stdcall; external Dlls_xors3d name '_xColorRed@0';
    function xColorGreen():Integer; stdcall; external Dlls_xors3d name '_xColorGreen@0';
    function xColorBlue():Integer; stdcall; external Dlls_xors3d name '_xColorBlue@0';
    procedure xClsColor(red_prs, green_prs, blue_prs, alpha_prs:Integer); stdcall; external Dlls_xors3d name '_xClsColor@16';
    procedure xClearWorld(entities_prs, brushes_prs, textures_prs:Integer); stdcall; external Dlls_xors3d name '_xClearWorld@12';
    procedure xColor(red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xColor@12';
    procedure xCls(); stdcall; external Dlls_xors3d name '_xCls@0';
    procedure xUpdateWorld(speed_prs:Single); stdcall; external Dlls_xors3d name '_xUpdateWorld@4';
    procedure xRenderEntity(camera_prs, entity_prs:Integer; tween_prs:Single); stdcall; external Dlls_xors3d name '_xRenderEntity@12';
    procedure xRenderWorld(tween_prs:Single; renderShadows_prs:Integer); stdcall; external Dlls_xors3d name '_xRenderWorld@8';
    procedure xSetAutoTB(flag_prs:Integer); stdcall; external Dlls_xors3d name '_xSetAutoTB@4';
    function xMaxClipPlanes():Integer; stdcall; external Dlls_xors3d name '_xMaxClipPlanes@0';
    procedure xWireframe(state_prs:Integer); stdcall; external Dlls_xors3d name '_xWireframe@4';
    procedure xDither(state_prs:Integer); stdcall; external Dlls_xors3d name '_xDither@4';
    procedure xSetSkinningMethod(skinMethod_prs:Integer); stdcall; external Dlls_xors3d name '_xSetSkinningMethod@4';
    function xTrisRendered():Integer; stdcall; external Dlls_xors3d name '_xTrisRendered@0';
    function xDIPCounter():Integer; stdcall; external Dlls_xors3d name '_xDIPCounter@0';
    function xSurfRendered():Integer; stdcall; external Dlls_xors3d name '_xSurfRendered@0';
    function xEntityRendered():Integer; stdcall; external Dlls_xors3d name '_xEntityRendered@0';
    procedure xAmbientLight(red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xAmbientLight@12';
    function xGetFPS():Integer; stdcall; external Dlls_xors3d name '_xGetFPS@0';
    procedure xAntiAlias(state_prs:Integer); stdcall; external Dlls_xors3d name '_xAntiAlias@4';
    procedure xSetTextureFiltering(filter_prs:Integer); stdcall; external Dlls_xors3d name '_xSetTextureFiltering@4';
    procedure xStretchRect(texture1_prs, x1_prs, y1_prs, width1_prs, height1_prs, texture2_prs, x2_prs, y2_prs, width2_prs, height2_prs, filter_prs:Integer); stdcall; external Dlls_xors3d name '_xStretchRect@44';
    procedure xStretchBackBuffer(texture_prs, x_prs, y_prs, width_prs, height_prs, filter_prs:Integer); stdcall; external Dlls_xors3d name '_xStretchBackBuffer@24';
    function xGetDevice():Integer; stdcall; external Dlls_xors3d name '_xGetDevice@0';
    procedure xReleaseGraphics(); stdcall; external Dlls_xors3d name '_xReleaseGraphics@0';
    procedure xShowPointer(); stdcall; external Dlls_xors3d name '_xShowPointer@0';
    procedure xHidePointer(); stdcall; external Dlls_xors3d name '_xHidePointer@0';
    procedure xCreateDSS(width_prs, height_prs:Integer); stdcall; external Dlls_xors3d name '_xCreateDSS@8';
    procedure xDeleteDSS(); stdcall; external Dlls_xors3d name '_xDeleteDSS@0';
    procedure xGridColor(centerRed_prs, centerGreen_prs, centerBlue_prs, gridRed_prs, gridGreen_prs, gridBlue_prs:Integer); stdcall; external Dlls_xors3d name '_xGridColor@24';
    procedure xDrawGrid(x_prs, z_prs:Single; gridSize_prs, range_prs:Integer); stdcall; external Dlls_xors3d name '_xDrawGrid@16';
    procedure xDrawBBox(draw_prs, zOn_prs, red_prs, green_prs, blue_prs, alpha_prs:Integer); stdcall; external Dlls_xors3d name '_xDrawBBox@24';
    procedure xGraphics3D(width_prs, height_prs, depth_prs, mode_prs, vsync_prs:Integer); stdcall; external Dlls_xors3d name '_xGraphics3D@20';
    procedure xGraphicsAspectRatio(aspectRatio_prs:Single); stdcall; external Dlls_xors3d name '_xGraphicsAspectRatio@4';
    procedure xGraphicsBorderColor(red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xGraphicsBorderColor@12';
    function xGetRenderWindow():Integer; stdcall; external Dlls_xors3d name '_xGetRenderWindow@0';
    procedure xKey(key_prs:AnsiString); stdcall; external Dlls_xors3d name '_xKey@4';
    procedure xSetEngineSetting(parameter_prs, value_prs:AnsiString); stdcall; external Dlls_xors3d name '_xSetEngineSetting@8';
    function xGetEngineSetting(parameter_prs:AnsiString):PAnsiChar; stdcall; external Dlls_xors3d name '_xGetEngineSetting@4';
    function xHWInstancingAvailable():Integer; stdcall; external Dlls_xors3d name '_xHWInstancingAvailable@0';
    function xShaderInstancingAvailable():Integer; stdcall; external Dlls_xors3d name '_xShaderInstancingAvailable@0';
    procedure xSetShaderLayer(layer_prs:Integer); stdcall; external Dlls_xors3d name '_xSetShaderLayer@4';
    function xGetShaderLayer():Integer; stdcall; external Dlls_xors3d name '_xGetShaderLayer@0';
    procedure xDrawMovementGizmo(x_prs, y_prs, z_prs:Single; selectMask_prs:Integer); stdcall; external Dlls_xors3d name '_xDrawMovementGizmo@16';
    procedure xDrawScaleGizmo(x_prs, y_prs, z_prs:Single; selectMask_prs:Integer; sx_prs, sy_prs, sz_prs:Single); stdcall; external Dlls_xors3d name '_xDrawScaleGizmo@28';
    procedure xDrawRotationGizmo(x_prs, y_prs, z_prs:Single; selectMask_prs:Integer; pitch_prs, yaw_prs, roll_prs:Single); stdcall; external Dlls_xors3d name '_xDrawRotationGizmo@28';
    function xCheckMovementGizmo(x_prs, y_prs, z_prs:Single; camera_prs, mx_prs, my_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCheckMovementGizmo@24';
    function xCheckScaleGizmo(x_prs, y_prs, z_prs:Single; camera_prs, mx_prs, my_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCheckScaleGizmo@24';
    function xCheckRotationGizmo(x_prs, y_prs, z_prs:Single; camera_prs, mx_prs, my_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCheckRotationGizmo@24';
    procedure xCaptureWorld(); stdcall; external Dlls_xors3d name '_xCaptureWorld@0';
    function xCountGfxModes():Integer; stdcall; external Dlls_xors3d name '_xCountGfxModes@0';
    function xGfxModeWidth(mode_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGfxModeWidth@4';
    function xGfxModeHeight(mode_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGfxModeHeight@4';
    function xGfxModeDepth(mode_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGfxModeDepth@4';
    function xGfxModeExists(width_prs, height_prs, depth_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGfxModeExists@12';
    procedure xAppWindowFrame(state_prs:Integer); stdcall; external Dlls_xors3d name '_xAppWindowFrame@4';
    function xMillisecs():Integer; stdcall; external Dlls_xors3d name '_xMillisecs@0';
    function xDeltaTime(fromInit_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xDeltaTime@4';
    function xDeltaValue(value_prs:Single; time_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xDeltaValue@8';
    procedure xAddDeviceLostCallback(func_prs:Integer); stdcall; external Dlls_xors3d name '_xAddDeviceLostCallback@4';
    procedure xDeleteDeviceLostCallback(func_prs:Integer); stdcall; external Dlls_xors3d name '_xDeleteDeviceLostCallback@4';
    procedure xImageColor(image_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xImageColor@16';
    procedure xImageAlpha(image_prs:Integer; alpha_prs:Single); stdcall; external Dlls_xors3d name '_xImageAlpha@8';
    function xImageBuffer(image_prs, frame_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImageBuffer@8';
    function xCreateImage(width_prs, height_prs, frame_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateImage@12';
    procedure xGrabImage(image_prs, x_prs, y_prs, frame_prs:Integer); stdcall; external Dlls_xors3d name '_xGrabImage@16';
    procedure xFreeImage(image_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeImage@4';
    function xLoadImage(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xLoadImage@4';
    function xLoadAnimImage(path_prs:AnsiString; width_prs, height_prs, startFrame_prs, frames_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xLoadAnimImage@20';
    procedure xSaveImage(image_prs:Integer; path_prs:AnsiString; frame_prs:Integer); stdcall; external Dlls_xors3d name '_xSaveImage@12';
    procedure xDrawImage(image_prs, x_prs, y_prs, frame_prs:Integer); stdcall; external Dlls_xors3d name '_xDrawImage@16';
    procedure xDrawImageRect(image_prs, x_prs, y_prs, rectx_prs, recty_prs, rectWidth_prs, rectHeight_prs, frame_prs:Integer); stdcall; external Dlls_xors3d name '_xDrawImageRect@32';
    procedure xScaleImage(image_prs:Integer; x_prs, y_prs:Single); stdcall; external Dlls_xors3d name '_xScaleImage@12';
    procedure xResizeImage(image_prs, width_prs, height_prs:Integer); stdcall; external Dlls_xors3d name '_xResizeImage@12';
    procedure xRotateImage(image_prs:Integer; angle_prs:Single); stdcall; external Dlls_xors3d name '_xRotateImage@8';
    function xImageAngle(image_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xImageAngle@4';
    function xImageWidth(image_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImageWidth@4';
    function xImageHeight(image_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImageHeight@4';
    function xImagesCollide(image1_prs, x1_prs, y1_prs, frame1_prs, image2_prs, x2_prs, y2_prs, frame2_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImagesCollide@32';
    function xImageRectCollide(image_prs, x_prs, y_prs, frame_prs, rectx_prs, recty_prs, rectWidth_prs, rectHeight_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImageRectCollide@32';
    function xImageRectOverlap(image_prs, x_prs, y_prs, rectx_prs, recty_prs, rectWidth_prs, rectHeight_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImageRectOverlap@28';
    function xImageXHandle(image_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImageXHandle@4';
    function xImageYHandle(image_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImageYHandle@4';
    procedure xHandleImage(image_prs, x_prs, y_prs:Integer); stdcall; external Dlls_xors3d name '_xHandleImage@12';
    procedure xMidHandle(image_prs:Integer); stdcall; external Dlls_xors3d name '_xMidHandle@4';
    procedure xAutoMidHandle(state_prs:Integer); stdcall; external Dlls_xors3d name '_xAutoMidHandle@4';
    procedure xTileImage(image_prs, x_prs, y_prs, frame_prs:Integer); stdcall; external Dlls_xors3d name '_xTileImage@16';
    function xImagesOverlap(image1_prs, x1_prs, y1_prs, image2_prs, x2_prs, y2_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImagesOverlap@24';
    procedure xMaskImage(image_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xMaskImage@16';
    function xCopyImage(image_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCopyImage@4';
    procedure xDrawBlock(image_prs, x_prs, y_prs, frame_prs:Integer); stdcall; external Dlls_xors3d name '_xDrawBlock@16';
    procedure xDrawBlockRect(image_prs, x_prs, y_prs, rectx_prs, recty_prs, rectWidth_prs, rectHeight_prs, frame_prs:Integer); stdcall; external Dlls_xors3d name '_xDrawBlockRect@32';
    function xImageActualWidth(image_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImageActualWidth@4';
    function xImageActualHeight(image_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xImageActualHeight@4';
    procedure xFlushKeys(); stdcall; external Dlls_xors3d name '_xFlushKeys@0';
    procedure xFlushMouse(); stdcall; external Dlls_xors3d name '_xFlushMouse@0';
    function xKeyHit(key_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xKeyHit@4';
    function xKeyUp(key_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xKeyUp@4';
    procedure xWaitKey(); stdcall; external Dlls_xors3d name '_xWaitKey@0';
    function xMouseHit(key_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xMouseHit@4';
    function xKeyDown(key_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xKeyDown@4';
    function xGetKey():Integer; stdcall; external Dlls_xors3d name '_xGetKey@0';
    function xMouseDown(key_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xMouseDown@4';
    function xMouseUp(key_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xMouseUp@4';
    function xGetMouse():Integer; stdcall; external Dlls_xors3d name '_xGetMouse@0';
    function xMouseX():Integer; stdcall; external Dlls_xors3d name '_xMouseX@0';
    function xMouseY():Integer; stdcall; external Dlls_xors3d name '_xMouseY@0';
    function xMouseZ():Integer; stdcall; external Dlls_xors3d name '_xMouseZ@0';
    function xMouseXSpeed():Integer; stdcall; external Dlls_xors3d name '_xMouseXSpeed@0';
    function xMouseYSpeed():Integer; stdcall; external Dlls_xors3d name '_xMouseYSpeed@0';
    function xMouseZSpeed():Integer; stdcall; external Dlls_xors3d name '_xMouseZSpeed@0';
    function xMouseSpeed():Integer; stdcall; external Dlls_xors3d name '_xMouseSpeed@0';
    procedure xMoveMouse(x_prs, y_prs:Integer); stdcall; external Dlls_xors3d name '_xMoveMouse@8';
    function xJoyType(portID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xJoyType@4';
    function xJoyDown(key_prs, portID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xJoyDown@8';
    function xJoyHit(key_prs, portID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xJoyHit@8';
    function xGetJoy(portID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetJoy@4';
    procedure xFlushJoy(); stdcall; external Dlls_xors3d name '_xFlushJoy@0';
    function xWaitJoy(portID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xWaitJoy@4';
    function xJoyX(portID_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJoyX@4';
    function xJoyY(portID_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJoyY@4';
    function xJoyZ(portID_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJoyZ@4';
    function xJoyU(portID_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJoyU@4';
    function xJoyV(portID_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJoyV@4';
    function xJoyPitch(portID_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJoyPitch@4';
    function xJoyYaw(portID_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJoyYaw@4';
    function xJoyRoll(portID_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJoyRoll@4';
    function xJoyHat(portID_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJoyHat@4';
    function xJoyXDir(portID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xJoyXDir@4';
    function xJoyYDir(portID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xJoyYDir@4';
    function xJoyZDir(portID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xJoyZDir@4';
    function xJoyUDir(portID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xJoyUDir@4';
    function xJoyVDir(portID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xJoyVDir@4';
    function xCreateLight(typeID_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateLight@4';
    procedure xLightShadowEpsilons(light_prs:Integer; epsilon1_prs, epsilon2_prs:Single); stdcall; external Dlls_xors3d name '_xLightShadowEpsilons@12';
    procedure xLightEnableShadows(light_prs, state_prs:Integer); stdcall; external Dlls_xors3d name '_xLightEnableShadows@8';
    function xLightShadowsEnabled(light_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xLightShadowsEnabled@4';
    procedure xLightRange(light_prs:Integer; range_prs:Single); stdcall; external Dlls_xors3d name '_xLightRange@8';
    procedure xLightColor(light_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xLightColor@16';
    procedure xLightConeAngles(light_prs:Integer; inner_prs, outer_prs:Single); stdcall; external Dlls_xors3d name '_xLightConeAngles@12';
    function xCreateLog(target_prs, level_prs:Integer; filename_prs, cssfilename_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xCreateLog@16';
    function xCloseLog():Integer; stdcall; external Dlls_xors3d name '_xCloseLog@0';
    function xGetLogString():PAnsiChar; stdcall; external Dlls_xors3d name '_xGetLogString@0';
    procedure xClearLogString(); stdcall; external Dlls_xors3d name '_xClearLogString@0';
    procedure xSetLogLevel(level_prs:Integer); stdcall; external Dlls_xors3d name '_xSetLogLevel@4';
    procedure xSetLogTarget(target_prs:Integer); stdcall; external Dlls_xors3d name '_xSetLogTarget@4';
    function xGetLogLevel():Integer; stdcall; external Dlls_xors3d name '_xGetLogLevel@0';
    function xGetLogTarget():Integer; stdcall; external Dlls_xors3d name '_xGetLogTarget@0';
    procedure xLogInfo(message_prs, func_prs, file_prs:AnsiString; line_prs:Integer); stdcall; external Dlls_xors3d name '_xLogInfo@16';
    procedure xLogMessage(message_prs, func_prs, file_prs:AnsiString; line_prs:Integer); stdcall; external Dlls_xors3d name '_xLogMessage@16';
    procedure xLogWarning(message_prs, func_prs, file_prs:AnsiString; line_prs:Integer); stdcall; external Dlls_xors3d name '_xLogWarning@16';
    procedure xLogError(message_prs, func_prs, file_prs:AnsiString; line_prs:Integer); stdcall; external Dlls_xors3d name '_xLogError@16';
    procedure xLogFatal(message_prs, func_prs, file_prs:AnsiString; line_prs:Integer); stdcall; external Dlls_xors3d name '_xLogFatal@16';
    function xCreateMesh(parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateMesh@4';
    function xLoadMesh(path_prs:AnsiString; parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xLoadMesh@8';
    function xLoadMeshWithChild(path_prs:AnsiString; parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xLoadMeshWithChild@8';
    function xLoadAnimMesh(path_prs:AnsiString; parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xLoadAnimMesh@8';
    function xCreateCube(parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateCube@4';
    function xCreateSphere(segments_prs, parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateSphere@8';
    function xCreateCylinder(segments_prs, solid_prs, parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateCylinder@12';
    function xCreateTorus(segments_prs:Integer; R_prs, r_tube_prs:Single; parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateTorus@16';
    function xCreateCone(segments_prs, solid_prs, parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateCone@12';
    function xCopyMesh(entity_prs, parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCopyMesh@8';
    procedure xAddMesh(source_prs, destination_prs:Integer); stdcall; external Dlls_xors3d name '_xAddMesh@8';
    procedure xFlipMesh(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xFlipMesh@4';
    procedure xPaintMesh(entity_prs, brush_prs:Integer); stdcall; external Dlls_xors3d name '_xPaintMesh@8';
    procedure xFitMesh(entity_prs:Integer; x_prs, y_prs, z_prs, width_prs, height_prs, depth_prs:Single; uniform_prs:Integer); stdcall; external Dlls_xors3d name '_xFitMesh@32';
    function xMeshWidth(entity_prs, recursive_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xMeshWidth@8';
    function xMeshHeight(entity_prs, recursive_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xMeshHeight@8';
    function xMeshDepth(entity_prs, recursive_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xMeshDepth@8';
    procedure xScaleMesh(entity_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xScaleMesh@16';
    procedure xRotateMesh(entity_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xRotateMesh@16';
    procedure xPositionMesh(entity_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xPositionMesh@16';
    procedure xUpdateNormals(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xUpdateNormals@4';
    procedure xUpdateN(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xUpdateN@4';
    procedure xUpdateTB(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xUpdateTB@4';
    function xMeshesBBIntersect(entity1_prs, entity2_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xMeshesBBIntersect@8';
    function xMeshesIntersect(entity1_prs, entity2_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xMeshesIntersect@8';
    function xGetMeshVB(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetMeshVB@4';
    function xGetMeshIB(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetMeshIB@4';
    function xGetMeshVBSize(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetMeshVBSize@4';
    function xGetMeshIBSize(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetMeshIBSize@4';
    procedure xDeleteMeshVB(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xDeleteMeshVB@4';
    procedure xDeleteMeshIB(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xDeleteMeshIB@4';
    function xCountSurfaces(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCountSurfaces@4';
    function xGetSurface(entity_prs, index_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetSurface@8';
    function xCreatePivot(parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreatePivot@4';
    function xFindSurface(entity_prs, brush_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xFindSurface@8';
    function xCreatePoly(sides_prs, parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreatePoly@8';
    procedure xMeshSingleSurface(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xMeshSingleSurface@4';
    function xSaveMesh(entity_prs:Integer; path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xSaveMesh@8';
    procedure xLightMesh(entity_prs, red_prs, green_prs, blue_prs:Integer; range_prs, lightX_prs, lightY_prs, lightZ_prs:Single); stdcall; external Dlls_xors3d name '_xLightMesh@32';
    procedure xMeshPrimitiveType(entity_prs, ptype_prs:Integer); stdcall; external Dlls_xors3d name '_xMeshPrimitiveType@8';
    procedure xParticlePosition(particle_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xParticlePosition@16';
    function xParticleX(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleX@4';
    function xParticleY(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleY@4';
    function xParticleZ(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleZ@4';
    procedure xParticleVeclocity(particle_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xParticleVeclocity@16';
    function xParticleVX(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleVX@4';
    function xParticleVY(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleVY@4';
    function xParticleVZ(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleVZ@4';
    procedure xParticleRotation(particle_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xParticleRotation@16';
    function xParticlePitch(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticlePitch@4';
    function xParticleYaw(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleYaw@4';
    function xParticleRoll(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleRoll@4';
    procedure xParticleTorque(particle_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xParticleTorque@16';
    function xParticleTPitch(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleTPitch@4';
    function xParticleTYaw(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleTYaw@4';
    function xParticleTRoll(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleTRoll@4';
    procedure xParticleSetAlpha(particle_prs:Integer; alpha_prs:Single); stdcall; external Dlls_xors3d name '_xParticleSetAlpha@8';
    function xParticleGetAlpha(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleGetAlpha@4';
    procedure xParticleColor(particle_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xParticleColor@16';
    function xParticleRed(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleRed@4';
    function xParticleGreen(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleGreen@4';
    function xParticleBlue(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleBlue@4';
    procedure xParticleScale(particle_prs:Integer; x_prs, y_prs:Single); stdcall; external Dlls_xors3d name '_xParticleScale@12';
    function xParticleSX(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleSX@4';
    function xParticleSY(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleSY@4';
    procedure xParticleScaleSpeed(particle_prs:Integer; x_prs, y_prs:Single); stdcall; external Dlls_xors3d name '_xParticleScaleSpeed@12';
    function xParticleScaleSpeedX(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleScaleSpeedX@4';
    function xParticleScaleSpeedY(particle_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xParticleScaleSpeedY@4';
    procedure xEntityAddDummyShape(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityAddDummyShape@4';
    procedure xEntityAddBoxShape(entity_prs:Integer; mass_prs, width_prs, height_prs, depth_prs:Single); stdcall; external Dlls_xors3d name '_xEntityAddBoxShape@20';
    procedure xEntityAddSphereShape(entity_prs:Integer; mass_prs, radius_prs:Single); stdcall; external Dlls_xors3d name '_xEntityAddSphereShape@12';
    procedure xEntityAddCapsuleShape(entity_prs:Integer; mass_prs, radius_prs, height_prs:Single); stdcall; external Dlls_xors3d name '_xEntityAddCapsuleShape@16';
    procedure xEntityAddConeShape(entity_prs:Integer; mass_prs, radius_prs, height_prs:Single); stdcall; external Dlls_xors3d name '_xEntityAddConeShape@16';
    procedure xEntityAddCylinderShape(entity_prs:Integer; mass_prs, width_prs, height_prs, depth_prs:Single); stdcall; external Dlls_xors3d name '_xEntityAddCylinderShape@20';
    procedure xEntityAddTriMeshShape(entity_prs:Integer; mass_prs:Single); stdcall; external Dlls_xors3d name '_xEntityAddTriMeshShape@8';
    procedure xEntityAddHullShape(entity_prs:Integer; mass_prs:Single); stdcall; external Dlls_xors3d name '_xEntityAddHullShape@8';
    procedure xWorldGravity(x_prs, y_prs, z_prs:Single; world_prs:Integer); stdcall; external Dlls_xors3d name '_xWorldGravity@16';
    function xWorldGravityX(world_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xWorldGravityX@4';
    function xWorldGravityY(world_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xWorldGravityY@4';
    function xWorldGravityZ(world_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xWorldGravityZ@4';
    procedure xWorldFrequency(frequency_prs:Single; world_prs:Integer); stdcall; external Dlls_xors3d name '_xWorldFrequency@8';
    procedure xEntityApplyCentralForce(entity_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xEntityApplyCentralForce@16';
    procedure xEntityApplyCentralImpulse(entity_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xEntityApplyCentralImpulse@16';
    procedure xEntityApplyTorque(entity_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xEntityApplyTorque@16';
    procedure xEntityApplyTorqueImpulse(entity_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xEntityApplyTorqueImpulse@16';
    procedure xEntityApplyForce(entity_prs:Integer; x_prs, y_prs, z_prs, pointx_prs, pointy_prs, pointz_prs:Single); stdcall; external Dlls_xors3d name '_xEntityApplyForce@28';
    procedure xEntityApplyImpulse(entity_prs:Integer; x_prs, y_prs, z_prs, pointx_prs, pointy_prs, pointz_prs:Single); stdcall; external Dlls_xors3d name '_xEntityApplyImpulse@28';
    procedure xEntityReleaseForces(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityReleaseForces@4';
    procedure xEntityDamping(entity_prs:Integer; linear_prs, angular_prs:Single); stdcall; external Dlls_xors3d name '_xEntityDamping@12';
    function xGetEntityLinearDamping(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xGetEntityLinearDamping@4';
    function xGetEntityAngularDamping(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xGetEntityAngularDamping@4';
    procedure xEntityFriction(entity_prs:Integer; friction_prs:Single); stdcall; external Dlls_xors3d name '_xEntityFriction@8';
    function xGetEntityFriction(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xGetEntityFriction@4';
    function xEntityForceX(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityForceX@4';
    function xEntityForceY(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityForceY@4';
    function xEntityForceZ(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityForceZ@4';
    function xEntityTorqueX(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityTorqueX@4';
    function xEntityTorqueY(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityTorqueY@4';
    function xEntityTorqueZ(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityTorqueZ@4';
    procedure xFreeEntityShapes(entity_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeEntityShapes@4';
    function xCountContacts(entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCountContacts@4';
    function xEntityContactX(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityContactX@8';
    function xEntityContactY(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityContactY@8';
    function xEntityContactZ(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityContactZ@8';
    function xEntityContactNX(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityContactNX@8';
    function xEntityContactNY(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityContactNY@8';
    function xEntityContactNZ(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityContactNZ@8';
    function xEntityContactDistance(entity_prs, index_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityContactDistance@8';
    function xContactEntity(entity_prs, index_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xContactEntity@8';
    function xCreateJoint(jointType_prs, firstBody_prs, secondBody_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateJoint@12';
    procedure xFreeJoint(joint_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeJoint@4';
    procedure xJointPivotA(joint_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xJointPivotA@16';
    procedure xJointPivotB(joint_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xJointPivotB@16';
    function xJointPivotAX(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointPivotAX@4';
    function xJointPivotAY(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointPivotAY@4';
    function xJointPivotAZ(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointPivotAZ@4';
    function xJointPivotBX(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointPivotBX@4';
    function xJointPivotBY(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointPivotBY@4';
    function xJointPivotBZ(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointPivotBZ@4';
    procedure xJointLinearLimits(joint_prs:Integer; lowerX_prs, lowerY_prs, lowerZ_prs, upperX_prs, upperY_prs, upperZ_prs:Single); stdcall; external Dlls_xors3d name '_xJointLinearLimits@28';
    procedure xJointAngularLimits(joint_prs:Integer; lowerX_prs, lowerY_prs, lowerZ_prs, upperX_prs, upperY_prs, upperZ_prs:Single); stdcall; external Dlls_xors3d name '_xJointAngularLimits@28';
    function xJointLinearLowerX(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointLinearLowerX@4';
    function xJointLinearLowerY(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointLinearLowerY@4';
    function xJointLinearLowerZ(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointLinearLowerZ@4';
    function xJointLinearUpperX(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointLinearUpperX@4';
    function xJointLinearUpperY(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointLinearUpperY@4';
    function xJointLinearUpperZ(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointLinearUpperZ@4';
    function xJointAngularLowerX(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointAngularLowerX@4';
    function xJointAngularLowerY(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointAngularLowerY@4';
    function xJointAngularLowerZ(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointAngularLowerZ@4';
    function xJointAngularUpperX(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointAngularUpperX@4';
    function xJointAngularUpperY(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointAngularUpperY@4';
    function xJointAngularUpperZ(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointAngularUpperZ@4';
    procedure xJoint6dofSpringParam(joint_prs, index_prs, enabled_prs:Integer; damping_prs, stiffness_prs:Single); stdcall; external Dlls_xors3d name '_xJoint6dofSpringParam@20';
    procedure xJointHingeAxis(joint_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xJointHingeAxis@16';
    procedure xJointHingeLimit(joint_prs:Integer; lowerLimit_prs, upperLimit_prs, softness_prs, biasFactor_prs, relaxationFactor_prs:Single); stdcall; external Dlls_xors3d name '_xJointHingeLimit@24';
    function xJointHingeLowerLimit(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointHingeLowerLimit@4';
    function xJointHingeUpperLimit(joint_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xJointHingeUpperLimit@4';
    procedure xJointEnableMotor(joint_prs, enabled_prs:Integer; targetVelocity_prs, maxForce_prs:Single; index_prs:Integer); stdcall; external Dlls_xors3d name '_xJointEnableMotor@20';
    procedure xJointHingeMotorTarget(joint_prs:Integer; targetAngle_prs, deltaTime_prs:Single); stdcall; external Dlls_xors3d name '_xJointHingeMotorTarget@12';
    procedure xEntityLinearFactor(entity_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xEntityLinearFactor@16';
    function xEntityLinearFactorX(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityLinearFactorX@4';
    function xEntityLinearFactorY(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityLinearFactorY@4';
    function xEntityLinearFactorZ(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityLinearFactorZ@4';
    procedure xEntityAngularFactor(entity_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xEntityAngularFactor@16';
    function xEntityAngularFactorX(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityAngularFactorX@4';
    function xEntityAngularFactorY(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityAngularFactorY@4';
    function xEntityAngularFactorZ(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityAngularFactorZ@4';
    procedure xEntityGravity(entity_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xEntityGravity@16';
    function xEntityGravityX(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityGravityX@4';
    function xEntityGravityY(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityGravityY@4';
    function xEntityGravityZ(entity_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xEntityGravityZ@4';
    procedure xPhysicsDebugRender(state_prs:Integer); stdcall; external Dlls_xors3d name '_xPhysicsDebugRender@4';
    function xLoadPostEffect(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xLoadPostEffect@4';
    procedure xFreePostEffect(postEffect_prs:Integer); stdcall; external Dlls_xors3d name '_xFreePostEffect@4';
    procedure xSetPostEffect(index_prs, postEffect_prs:Integer; technique_prs:AnsiString); stdcall; external Dlls_xors3d name '_xSetPostEffect@12';
    procedure xRenderPostEffects(); stdcall; external Dlls_xors3d name '_xRenderPostEffects@0';
    procedure xSetPostEffectInt(postEffect_prs:Integer; name_prs:AnsiString; value_prs:Integer); stdcall; external Dlls_xors3d name '_xSetPostEffectInt@12';
    procedure xSetPostEffectFloat(postEffect_prs:Integer; name_prs:AnsiString; value_prs:Single); stdcall; external Dlls_xors3d name '_xSetPostEffectFloat@12';
    procedure xSetPostEffectBool(postEffect_prs:Integer; name_prs:AnsiString; value_prs:Integer); stdcall; external Dlls_xors3d name '_xSetPostEffectBool@12';
    procedure xSetPostEffectVector(postEffect_prs:Integer; name_prs:AnsiString; x_prs, y_prs, z_prs, w_prs:Single); stdcall; external Dlls_xors3d name '_xSetPostEffectVector@24';
    procedure xSetPostEffectTexture(postEffect_prs:Integer; name_prs:AnsiString; texture_prs, frame_prs:Integer); stdcall; external Dlls_xors3d name '_xSetPostEffectTexture@16';
    procedure xDeletePostEffectConstant(postEffect_prs:Integer; name_prs:AnsiString); stdcall; external Dlls_xors3d name '_xDeletePostEffectConstant@8';
    procedure xClearPostEffectConstants(postEffect_prs:Integer); stdcall; external Dlls_xors3d name '_xClearPostEffectConstants@4';
    function xCreatePSystem(pointSprites_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreatePSystem@4';
    function xPSystemType(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemType@4';
    procedure xPSystemSetBlend(psystem_prs, mode_prs:Integer); stdcall; external Dlls_xors3d name '_xPSystemSetBlend@8';
    function xPSystemGetBlend(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetBlend@4';
    procedure xPSystemSetMaxParticles(psystem_prs, maxNumber_prs:Integer); stdcall; external Dlls_xors3d name '_xPSystemSetMaxParticles@8';
    function xPSystemGetMaxParticles(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetMaxParticles@4';
    procedure xPSystemSetEmitterLifetime(psystem_prs, lifetime_prs:Integer); stdcall; external Dlls_xors3d name '_xPSystemSetEmitterLifetime@8';
    function xPSystemGetEmitterLifetime(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetEmitterLifetime@4';
    procedure xPSystemSetParticleLifetime(psystem_prs, lifetime_prs:Integer); stdcall; external Dlls_xors3d name '_xPSystemSetParticleLifetime@8';
    function xPSystemGetParticleLifetime(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetParticleLifetime@4';
    procedure xPSystemSetCreationInterval(psystem_prs, interval_prs:Integer); stdcall; external Dlls_xors3d name '_xPSystemSetCreationInterval@8';
    function xPSystemGetCreationInterval(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetCreationInterval@4';
    procedure xPSystemSetCreationFrequency(psystem_prs, frequency_prs:Integer); stdcall; external Dlls_xors3d name '_xPSystemSetCreationFrequency@8';
    function xPSystemGetCreationFrequency(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetCreationFrequency@4';
    procedure xPSystemSetTexture(psystem_prs, texture_prs, frames_prs:Integer; speed_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetTexture@16';
    function xPSystemGetTexture(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetTexture@4';
    function xPSystemGetTextureFrames(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetTextureFrames@4';
    function xPSystemGetTextureAnimationSpeed(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetTextureAnimationSpeed@4';
    procedure xPSystemSetOffset(psystem_prs:Integer; minx_prs, miny_prs, minz_prs, maxx_prs, maxy_prs, maxz_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetOffset@28';
    function xPSystemGetOffsetMinX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetOffsetMinX@4';
    function xPSystemGetOffsetMinY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetOffsetMinY@4';
    function xPSystemGetOffsetMinZ(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetOffsetMinZ@4';
    function xPSystemGetOffsetMaxX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetOffsetMaxX@4';
    function xPSystemGetOffsetMaxY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetOffsetMaxY@4';
    function xPSystemGetOffsetMaxZ(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetOffsetMaxZ@4';
    procedure xPSystemSetVelocity(psystem_prs:Integer; minx_prs, miny_prs, minz_prs, maxx_prs, maxy_prs, maxz_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetVelocity@28';
    function xPSystemGetVelocityMinX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetVelocityMinX@4';
    function xPSystemGetVelocityMinY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetVelocityMinY@4';
    function xPSystemGetVelocityMinZ(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetVelocityMinZ@4';
    function xPSystemGetVelocityMaxX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetVelocityMaxX@4';
    function xPSystemGetVelocityMaxY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetVelocityMaxY@4';
    function xPSystemGetVelocityMaxZ(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetVelocityMaxZ@4';
    procedure xPSystemEnableFixedQuads(psystem_prs, state_prs:Integer); stdcall; external Dlls_xors3d name '_xPSystemEnableFixedQuads@8';
    function xPSystemFixedQuadsUsed(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemFixedQuadsUsed@4';
    procedure xPSystemSetTorque(psystem_prs:Integer; minx_prs, miny_prs, minz_prs, maxx_prs, maxy_prs, maxz_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetTorque@28';
    function xPSystemGetTorqueMinX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetTorqueMinX@4';
    function xPSystemGetTorqueMinY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetTorqueMinY@4';
    function xPSystemGetTorqueMinZ(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetTorqueMinZ@4';
    function xPSystemGetTorqueMaxX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetTorqueMaxX@4';
    function xPSystemGetTorqueMaxY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetTorqueMaxY@4';
    function xPSystemGetTorqueMaxZ(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetTorqueMaxZ@4';
    procedure xPSystemSetGravity(psystem_prs:Integer; gravity_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetGravity@8';
    function xPSystemGetGravity(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetGravity@4';
    procedure xPSystemSetAlpha(psystem_prs:Integer; alpha_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetAlpha@8';
    function xPSystemGetAlpha(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetAlpha@4';
    procedure xPSystemSetFadeSpeed(psystem_prs:Integer; speed_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetFadeSpeed@8';
    function xPSystemGetFadeSpeed(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetFadeSpeed@4';
    procedure xPSystemSetParticleSize(psystem_prs:Integer; minx_prs, miny_prs, maxx_prs, maxy_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetParticleSize@20';
    function xPSystemGetSizeMinX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetSizeMinX@4';
    function xPSystemGetSizeMinY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetSizeMinY@4';
    function xPSystemGetSizeMaxX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetSizeMaxX@4';
    function xPSystemGetSizeMaxY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetSizeMaxY@4';
    procedure xPSystemSetScaleSpeed(psystem_prs:Integer; minx_prs, miny_prs, maxx_prs, maxy_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetScaleSpeed@20';
    function xPSystemGetScaleSpeedMinX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetScaleSpeedMinX@4';
    function xPSystemGetScaleSpeedMinY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetScaleSpeedMinY@4';
    function xPSystemGetScaleSpeedMaxX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetScaleSpeedMaxX@4';
    function xPSystemGetScaleSpeedMaxY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetScaleSpeedMaxY@4';
    procedure xPSystemSetAngles(psystem_prs:Integer; minx_prs, miny_prs, minz_prs, maxx_prs, maxy_prs, maxz_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetAngles@28';
    function xPSystemGetAnglesMinX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetAnglesMinX@4';
    function xPSystemGetAnglesMinY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetAnglesMinY@4';
    function xPSystemGetAnglesMinZ(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetAnglesMinZ@4';
    function xPSystemGetAnglesMaxX(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetAnglesMaxX@4';
    function xPSystemGetAnglesMaxY(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetAnglesMaxY@4';
    function xPSystemGetAnglesMaxZ(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetAnglesMaxZ@4';
    procedure xPSystemSetColorMode(psystem_prs, mode_prs:Integer); stdcall; external Dlls_xors3d name '_xPSystemSetColorMode@8';
    function xPSystemGetColorMode(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetColorMode@4';
    procedure xPSystemSetColors(psystem_prs:Integer; sred_prs, sgreen_prs, sblue_prs, ered_prs, egreen_prs, eblue_prs:Single); stdcall; external Dlls_xors3d name '_xPSystemSetColors@28';
    function xPSystemGetBeginColorRed(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetBeginColorRed@4';
    function xPSystemGetBeginColorGreen(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetBeginColorGreen@4';
    function xPSystemGetBeginColorBlue(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetBeginColorBlue@4';
    function xPSystemGetEndColorRed(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetEndColorRed@4';
    function xPSystemGetEndColorGreen(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetEndColorGreen@4';
    function xPSystemGetEndColorBlue(psystem_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xPSystemGetEndColorBlue@4';
    procedure xFreePSystem(psystem_prs:Integer); stdcall; external Dlls_xors3d name '_xFreePSystem@4';
    procedure xPSystemSetParticleParenting(psystem_prs, mode_prs:Integer); stdcall; external Dlls_xors3d name '_xPSystemSetParticleParenting@8';
    function xPSystemGetParticleParenting(psystem_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPSystemGetParticleParenting@4';
    function xLinePick(x_prs, y_prs, z_prs, dx_prs, dy_prs, dz_prs, distance_prs:Single):Integer; stdcall; external Dlls_xors3d name '_xLinePick@28';
    function xEntityPick(entity_prs:Integer; range_prs:Single):Integer; stdcall; external Dlls_xors3d name '_xEntityPick@8';
    function xCameraPick(camera_prs, x_prs, y_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCameraPick@12';
    function xPickedNX():Single; stdcall; external Dlls_xors3d name '_xPickedNX@0';
    function xPickedNY():Single; stdcall; external Dlls_xors3d name '_xPickedNY@0';
    function xPickedNZ():Single; stdcall; external Dlls_xors3d name '_xPickedNZ@0';
    function xPickedX():Single; stdcall; external Dlls_xors3d name '_xPickedX@0';
    function xPickedY():Single; stdcall; external Dlls_xors3d name '_xPickedY@0';
    function xPickedZ():Single; stdcall; external Dlls_xors3d name '_xPickedZ@0';
    function xPickedEntity():Integer; stdcall; external Dlls_xors3d name '_xPickedEntity@0';
    function xPickedSurface():Integer; stdcall; external Dlls_xors3d name '_xPickedSurface@0';
    function xPickedTriangle():Integer; stdcall; external Dlls_xors3d name '_xPickedTriangle@0';
    function xPickedTime():Integer; stdcall; external Dlls_xors3d name '_xPickedTime@0';
    procedure xSetShadowsBlur(blurLevel_prs:Integer); stdcall; external Dlls_xors3d name '_xSetShadowsBlur@4';
    procedure xSetShadowShader(path_prs:AnsiString); stdcall; external Dlls_xors3d name '_xSetShadowShader@4';
    function xInitShadows(dirSize_prs, spotSize_prs, pointSize_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xInitShadows@12';
    procedure xSetShadowParams(splitPlanes_prs:Integer; splitLambda_prs:Single; useOrtho_prs:Integer; lightDist_prs:Single); stdcall; external Dlls_xors3d name '_xSetShadowParams@16';
    procedure xRenderShadows(mainCamera_prs, texture_prs:Integer); stdcall; external Dlls_xors3d name '_xRenderShadows@8';
    procedure xShadowPriority(priority_prs:Integer); stdcall; external Dlls_xors3d name '_xShadowPriority@4';
    procedure xCameraDisableShadows(camera_prs:Integer); stdcall; external Dlls_xors3d name '_xCameraDisableShadows@4';
    procedure xCameraEnableShadows(camera_prs:Integer); stdcall; external Dlls_xors3d name '_xCameraEnableShadows@4';
    procedure xEntityCastShadows(entity_prs, light_prs, state_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityCastShadows@12';
    procedure xEntityReceiveShadows(entity_prs, light_prs, state_prs:Integer); stdcall; external Dlls_xors3d name '_xEntityReceiveShadows@12';
    function xEntityIsCaster(entity_prs, light_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEntityIsCaster@8';
    function xEntityIsReceiver(entity_prs, light_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEntityIsReceiver@8';
    function xLoadSound(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xLoadSound@4';
    function xLoad3DSound(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xLoad3DSound@4';
    procedure xFreeSound(sound_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeSound@4';
    procedure xLoopSound(sound_prs:Integer); stdcall; external Dlls_xors3d name '_xLoopSound@4';
    procedure xSoundPitch(sound_prs, pitch_prs:Integer); stdcall; external Dlls_xors3d name '_xSoundPitch@8';
    procedure xSoundVolume(sound_prs:Integer; volume_prs:Single); stdcall; external Dlls_xors3d name '_xSoundVolume@8';
    procedure xSoundPan(sound_prs:Integer; pan_prs:Single); stdcall; external Dlls_xors3d name '_xSoundPan@8';
    function xPlaySound(sound_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xPlaySound@4';
    procedure xStopChannel(channel_prs:Integer); stdcall; external Dlls_xors3d name '_xStopChannel@4';
    procedure xPauseChannel(channel_prs:Integer); stdcall; external Dlls_xors3d name '_xPauseChannel@4';
    procedure xResumeChannel(channel_prs:Integer); stdcall; external Dlls_xors3d name '_xResumeChannel@4';
    function xPlayMusic(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xPlayMusic@4';
    procedure xChannelPitch(channel_prs, pitch_prs:Integer); stdcall; external Dlls_xors3d name '_xChannelPitch@8';
    procedure xChannelVolume(channel_prs:Integer; volume_prs:Single); stdcall; external Dlls_xors3d name '_xChannelVolume@8';
    procedure xChannelPan(channel_prs:Integer; pan_prs:Single); stdcall; external Dlls_xors3d name '_xChannelPan@8';
    function xChannelPlaying(channel_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xChannelPlaying@4';
    function xEmitSound(sound_prs, entity_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xEmitSound@8';
    function xCreateListener(parent_prs:Integer; roFactor_prs, doplerFactor_prs, distFactor_prs:Single):Integer; stdcall; external Dlls_xors3d name '_xCreateListener@16';
    function xGetListener():Integer; stdcall; external Dlls_xors3d name '_xGetListener@0';
    function xInitalizeSound():Integer; stdcall; external Dlls_xors3d name '_xInitalizeSound@0';
    function xCreateSprite(parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateSprite@4';
    procedure xSpriteViewMode(sprite_prs, mode_prs:Integer); stdcall; external Dlls_xors3d name '_xSpriteViewMode@8';
    procedure xHandleSprite(sprite_prs:Integer; x_prs, y_prs:Single); stdcall; external Dlls_xors3d name '_xHandleSprite@12';
    function xLoadSprite(path_prs:AnsiString; flags_prs, parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xLoadSprite@12';
    procedure xRotateSprite(sprite_prs:Integer; angle_prs:Single); stdcall; external Dlls_xors3d name '_xRotateSprite@8';
    procedure xScaleSprite(sprite_prs:Integer; xScale_prs, yScale_prs:Single); stdcall; external Dlls_xors3d name '_xScaleSprite@12';
    function xCreateSurface(entity_prs, brush_prs, dynamic_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateSurface@12';
    function xGetSurfaceBrush(surface_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetSurfaceBrush@4';
    function xAddVertex(surface_prs:Integer; x_prs, y_prs, z_prs, u_prs, v_prs, w_prs:Single):Integer; stdcall; external Dlls_xors3d name '_xAddVertex@28';
    function xAddTriangle(surface_prs, v0_prs, v1_prs, v2_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xAddTriangle@16';
    procedure xSetSurfaceFrustumSphere(surface_prs:Integer; x_prs, y_prs, z_prs, radii_prs:Single); stdcall; external Dlls_xors3d name '_xSetSurfaceFrustumSphere@20';
    procedure xVertexCoords(surface_prs, vertex_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xVertexCoords@20';
    procedure xVertexNormal(surface_prs, vertex_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xVertexNormal@20';
    procedure xVertexTangent(surface_prs, vertex_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xVertexTangent@20';
    procedure xVertexBinormal(surface_prs, vertex_prs:Integer; x_prs, y_prs, z_prs:Single); stdcall; external Dlls_xors3d name '_xVertexBinormal@20';
    procedure xVertexColor(surface_prs, vertex_prs, red_prs, green_prs, blue_prs:Integer; alpha_prs:Single); stdcall; external Dlls_xors3d name '_xVertexColor@24';
    procedure xVertexTexCoords(surface_prs, vertex_prs:Integer; u_prs, v_prs, w_prs:Single; textureSet_prs:Integer); stdcall; external Dlls_xors3d name '_xVertexTexCoords@24';
    function xCountVertices(surface_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCountVertices@4';
    function xVertexX(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexX@8';
    function xVertexY(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexY@8';
    function xVertexZ(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexZ@8';
    function xVertexNX(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexNX@8';
    function xVertexNY(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexNY@8';
    function xVertexNZ(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexNZ@8';
    function xVertexTX(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexTX@8';
    function xVertexTY(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexTY@8';
    function xVertexTZ(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexTZ@8';
    function xVertexBX(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexBX@8';
    function xVertexBY(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexBY@8';
    function xVertexBZ(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexBZ@8';
    function xVertexU(surface_prs, vertex_prs, textureSet_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexU@12';
    function xVertexV(surface_prs, vertex_prs, textureSet_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexV@12';
    function xVertexW(surface_prs, vertex_prs, textureSet_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexW@12';
    function xVertexRed(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexRed@8';
    function xVertexGreen(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexGreen@8';
    function xVertexBlue(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexBlue@8';
    function xVertexAlpha(surface_prs, vertex_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xVertexAlpha@8';
    function xTriangleVertex(surface_prs, triangle_prs, corner_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xTriangleVertex@12';
    function xCountTriangles(surface_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCountTriangles@4';
    procedure xPaintSurface(surface_prs, brush_prs:Integer); stdcall; external Dlls_xors3d name '_xPaintSurface@8';
    procedure xClearSurface(surface_prs, vertices_prs, triangles_prs:Integer); stdcall; external Dlls_xors3d name '_xClearSurface@12';
    function xGetSurfaceTexture(surface_prs, index_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetSurfaceTexture@8';
    procedure xFreeSurface(surface_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeSurface@4';
    procedure xSurfacePrimitiveType(surface_prs, ptype_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfacePrimitiveType@8';
    procedure xSurfaceTexture(surface_prs, texture_prs, frame_prs, index_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceTexture@16';
    procedure xSurfaceColor(surface_prs, red_prs, green_prs, blue_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceColor@16';
    procedure xSurfaceAlpha(surface_prs:Integer; alpha_prs:Single); stdcall; external Dlls_xors3d name '_xSurfaceAlpha@8';
    procedure xSurfaceShininess(surface_prs:Integer; shininess_prs:Single); stdcall; external Dlls_xors3d name '_xSurfaceShininess@8';
    procedure xSurfaceBlend(surface_prs, blendMode_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceBlend@8';
    procedure xSurfaceFX(surface_prs, fxFlags_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceFX@8';
    procedure xSurfaceAlphaRef(surface_prs, alphaRef_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceAlphaRef@8';
    procedure xSurfaceAlphaFunc(surface_prs, alphaFunc_prs:Integer); stdcall; external Dlls_xors3d name '_xSurfaceAlphaFunc@8';
    function xCPUName():PAnsiChar; stdcall; external Dlls_xors3d name '_xCPUName@0';
    function xCPUVendor():PAnsiChar; stdcall; external Dlls_xors3d name '_xCPUVendor@0';
    function xCPUFamily():Integer; stdcall; external Dlls_xors3d name '_xCPUFamily@0';
    function xCPUModel():Integer; stdcall; external Dlls_xors3d name '_xCPUModel@0';
    function xCPUStepping():Integer; stdcall; external Dlls_xors3d name '_xCPUStepping@0';
    function xCPUSpeed():Integer; stdcall; external Dlls_xors3d name '_xCPUSpeed@0';
    function xVideoInfo():PAnsiChar; stdcall; external Dlls_xors3d name '_xVideoInfo@0';
    function xVideoAspectRatio():Single; stdcall; external Dlls_xors3d name '_xVideoAspectRatio@0';
    function xVideoAspectRatioStr():PAnsiChar; stdcall; external Dlls_xors3d name '_xVideoAspectRatioStr@0';
    function xGetTotalPhysMem():Single; stdcall; external Dlls_xors3d name '_xGetTotalPhysMem@0';
    function xGetAvailPhysMem():Single; stdcall; external Dlls_xors3d name '_xGetAvailPhysMem@0';
    function xGetTotalPageMem():Single; stdcall; external Dlls_xors3d name '_xGetTotalPageMem@0';
    function xGetAvailPageMem():Single; stdcall; external Dlls_xors3d name '_xGetAvailPageMem@0';
    function xGetTotalVidMem():Single; stdcall; external Dlls_xors3d name '_xGetTotalVidMem@0';
    function xGetAvailVidMem():Single; stdcall; external Dlls_xors3d name '_xGetAvailVidMem@0';
    function xGetTotalVidLocalMem():Single; stdcall; external Dlls_xors3d name '_xGetTotalVidLocalMem@0';
    function xGetAvailVidLocalMem():Single; stdcall; external Dlls_xors3d name '_xGetAvailVidLocalMem@0';
    function xGetTotalVidNonlocalMem():Single; stdcall; external Dlls_xors3d name '_xGetTotalVidNonlocalMem@0';
    function xGetAvailVidNonlocalMem():Single; stdcall; external Dlls_xors3d name '_xGetAvailVidNonlocalMem@0';
    function xLoadTerrain(path_prs:AnsiString; parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xLoadTerrain@8';
    function xCreateTerrain(size_prs, parent_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateTerrain@8';
    procedure xTerrainShading(terrain_prs, state_prs:Integer); stdcall; external Dlls_xors3d name '_xTerrainShading@8';
    function xTerrainHeight(terrain_prs, x_prs, y_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xTerrainHeight@12';
    function xTerrainSize(terrain_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xTerrainSize@4';
    function xTerrainX(terrain_prs:Integer; x_prs, y_prs, z_prs:Single):Single; stdcall; external Dlls_xors3d name '_xTerrainX@16';
    function xTerrainY(terrain_prs:Integer; x_prs, y_prs, z_prs:Single):Single; stdcall; external Dlls_xors3d name '_xTerrainY@16';
    function xTerrainZ(terrain_prs:Integer; x_prs, y_prs, z_prs:Single):Single; stdcall; external Dlls_xors3d name '_xTerrainZ@16';
    procedure xModifyTerrain(terrain_prs, x_prs, y_prs:Integer; height_prs:Single; realtime_prs:Integer); stdcall; external Dlls_xors3d name '_xModifyTerrain@20';
    procedure xTerrainDetail(terrain_prs, detail_prs:Integer); stdcall; external Dlls_xors3d name '_xTerrainDetail@8';
    procedure xTerrainSplatting(terrain_prs, state_prs:Integer); stdcall; external Dlls_xors3d name '_xTerrainSplatting@8';
    function xLoadTerrainTexture(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xLoadTerrainTexture@4';
    procedure xFreeTerrainTexture(texture_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeTerrainTexture@4';
    procedure xTerrainTextureLightmap(texture_prs, state_prs:Integer); stdcall; external Dlls_xors3d name '_xTerrainTextureLightmap@8';
    procedure xTerrainTexture(terrain_prs, texture_prs:Integer); stdcall; external Dlls_xors3d name '_xTerrainTexture@8';
    procedure xTerrainViewZone(terrain_prs, viewZone_prs, texturingZone_prs:Integer); stdcall; external Dlls_xors3d name '_xTerrainViewZone@12';
    procedure xTerrainLODs(lodsCount_prs:Integer); stdcall; external Dlls_xors3d name '_xTerrainLODs@4';
    function xTextureWidth(texture_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xTextureWidth@4';
    function xTextureHeight(texture_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xTextureHeight@4';
    function xCreateTexture(width_prs, height_prs, flags_prs, frames_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateTexture@16';
    procedure xFreeTexture(texture_prs:Integer); stdcall; external Dlls_xors3d name '_xFreeTexture@4';
    procedure xSetTextureFilter(texture_prs, mode_prs:Integer); stdcall; external Dlls_xors3d name '_xSetTextureFilter@8';
    procedure xTextureBlend(texture_prs, blend_prs:Integer); stdcall; external Dlls_xors3d name '_xTextureBlend@8';
    procedure xTextureCoords(texture_prs, coords_prs:Integer); stdcall; external Dlls_xors3d name '_xTextureCoords@8';
    procedure xTextureFilter(matchText_prs:AnsiString; flags_prs:Integer); stdcall; external Dlls_xors3d name '_xTextureFilter@8';
    procedure xClearTextureFilters(); stdcall; external Dlls_xors3d name '_xClearTextureFilters@0';
    function xLoadTexture(path_prs:AnsiString; flags_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xLoadTexture@8';
    function xTextureName(texture_prs:Integer):PAnsiChar; stdcall; external Dlls_xors3d name '_xTextureName@4';
    procedure xPositionTexture(texture_prs:Integer; x_prs, y_prs:Single); stdcall; external Dlls_xors3d name '_xPositionTexture@12';
    procedure xScaleTexture(texture_prs:Integer; x_prs, y_prs:Single); stdcall; external Dlls_xors3d name '_xScaleTexture@12';
    procedure xRotateTexture(texture_prs:Integer; angle_prs:Single); stdcall; external Dlls_xors3d name '_xRotateTexture@8';
    function xLoadAnimTexture(path_prs:AnsiString; flags_prs, width_prs, height_prs, startFrame_prs, frames_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xLoadAnimTexture@24';
    function xCreateTextureFromData(pixelsData_prs, width_prs, height_prs, flags_prs, frames_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xCreateTextureFromData@20';
    function xGetTextureData(texture_prs, frame_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetTextureData@8';
    function xGetTextureDataPitch(texture_prs, frame_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetTextureDataPitch@8';
    function xGetTextureSurface(texture_prs, frame_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetTextureSurface@8';
    function xGetTextureFrames(texture_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xGetTextureFrames@4';
    procedure xSetCubeFace(texture_prs, face_prs:Integer); stdcall; external Dlls_xors3d name '_xSetCubeFace@8';
    procedure xSetCubeMode(texture_prs, mode_prs:Integer); stdcall; external Dlls_xors3d name '_xSetCubeMode@8';
    function xVectorPitch(x_prs, y_prs, z_prs:Single):Single; stdcall; external Dlls_xors3d name '_xVectorPitch@12';
    function xVectorYaw(x_prs, y_prs, z_prs:Single):Single; stdcall; external Dlls_xors3d name '_xVectorYaw@12';
    function xDeltaPitch(entity1_prs, entity2_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xDeltaPitch@8';
    function xDeltaYaw(entity1_prs, entity2_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xDeltaYaw@8';
    function xTFormedX():Single; stdcall; external Dlls_xors3d name '_xTFormedX@0';
    function xTFormedY():Single; stdcall; external Dlls_xors3d name '_xTFormedY@0';
    function xTFormedZ():Single; stdcall; external Dlls_xors3d name '_xTFormedZ@0';
    procedure xTFormPoint(x_prs, y_prs, z_prs:Single; source_prs, destination_prs:Integer); stdcall; external Dlls_xors3d name '_xTFormPoint@20';
    procedure xTFormVector(x_prs, y_prs, z_prs:Single; source_prs, destination_prs:Integer); stdcall; external Dlls_xors3d name '_xTFormVector@20';
    procedure xTFormNormal(x_prs, y_prs, z_prs:Single; source_prs, destination_prs:Integer); stdcall; external Dlls_xors3d name '_xTFormNormal@20';
    function xOpenMovie(path_prs:AnsiString):Integer; stdcall; external Dlls_xors3d name '_xOpenMovie@4';
    procedure xCloseMovie(video_prs:Integer); stdcall; external Dlls_xors3d name '_xCloseMovie@4';
    procedure xDrawMovie(video_prs, x_prs, y_prs, width_prs, height_prs:Integer); stdcall; external Dlls_xors3d name '_xDrawMovie@20';
    function xMovieWidth(video_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xMovieWidth@4';
    function xMovieHeight(video_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xMovieHeight@4';
    function xMoviePlaying(video_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xMoviePlaying@4';
    procedure xMovieSeek(video_prs:Integer; time_prs:Single; relative_prs:Integer); stdcall; external Dlls_xors3d name '_xMovieSeek@12';
    function xMovieLength(video_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xMovieLength@4';
    function xMovieCurrentTime(video_prs:Integer):Single; stdcall; external Dlls_xors3d name '_xMovieCurrentTime@4';
    procedure xMoviePause(video_prs:Integer); stdcall; external Dlls_xors3d name '_xMoviePause@4';
    procedure xMovieResume(video_prs:Integer); stdcall; external Dlls_xors3d name '_xMovieResume@4';
    function xMovieTexture(video_prs:Integer):Integer; stdcall; external Dlls_xors3d name '_xMovieTexture@4';
    function xCreateWorld():Integer; stdcall; external Dlls_xors3d name '_xCreateWorld@0';
    procedure xSetActiveWorld(world_prs:Integer); stdcall; external Dlls_xors3d name '_xSetActiveWorld@4';
    function xGetActiveWorld():Integer; stdcall; external Dlls_xors3d name '_xGetActiveWorld@0';
    function xGetDefaultWorld():Integer; stdcall; external Dlls_xors3d name '_xGetDefaultWorld@0';
    procedure xDeleteWorld(world_prs:Integer); stdcall; external Dlls_xors3d name '_xDeleteWorld@4';
{$ENDIF}
    implementation
end.
